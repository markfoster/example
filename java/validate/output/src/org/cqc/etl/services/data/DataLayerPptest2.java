package org.cqc.etl.services.data;

import java.io.Serializable;
import org.cqc.etl.model.obj.pptest2.Chapter;
import org.cqc.etl.model.obj.pptest2.ChapterPK;
import org.cqc.etl.model.obj.pptest2.Location;
import org.cqc.etl.model.obj.pptest2.LocationCondition;
import org.cqc.etl.model.obj.pptest2.LocationConditionPK;
import org.cqc.etl.model.obj.pptest2.LocationPK;
import org.cqc.etl.model.obj.pptest2.LocationRegulatedActivity;
import org.cqc.etl.model.obj.pptest2.LocationRegulatedActivityPK;
import org.cqc.etl.model.obj.pptest2.NominatedIndividual;
import org.cqc.etl.model.obj.pptest2.NominatedIndividualPK;
import org.cqc.etl.model.obj.pptest2.Outcome;
import org.cqc.etl.model.obj.pptest2.OutcomePK;
import org.cqc.etl.model.obj.pptest2.Partner;
import org.cqc.etl.model.obj.pptest2.PartnerPK;
import org.cqc.etl.model.obj.pptest2.Provider;
import org.cqc.etl.model.obj.pptest2.ProviderCondition;
import org.cqc.etl.model.obj.pptest2.ProviderConditionPK;
import org.cqc.etl.model.obj.pptest2.ProviderRegulatedActivity;
import org.cqc.etl.model.obj.pptest2.ProviderRegulatedActivityPK;
import org.cqc.etl.model.obj.pptest2.RegisteredManager;
import org.cqc.etl.model.obj.pptest2.RegisteredManagerCondition;
import org.cqc.etl.model.obj.pptest2.RegisteredManagerConditionPK;
import org.cqc.etl.model.obj.pptest2.RegisteredManagerPK;
import org.cqc.etl.model.obj.pptest2.ReportSummary;
import org.cqc.etl.model.obj.pptest2.ReportSummaryPK;
import org.cqc.etl.model.obj.pptest2.ServiceType;
import org.cqc.etl.model.obj.pptest2.ServiceTypePK;
import org.cqc.etl.model.obj.pptest2.ServiceUserBand;
import org.cqc.etl.model.obj.pptest2.ServiceUserBandPK;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.ReplicationMode;
import org.hibernate.Session;
import java.util.Collection;
import com.felees.hbnpojogen.persistence.IPojoGenEntity;
/** 
 * Data layer.
 * @author autogenerated
 */
public interface DataLayerPptest2 {

    /**
     * Deletes the given object from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to delete
     */
    <T> void delete(T persistentObject);
    /**
     * Refresh the object $class.className from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to reload
     */
    <T> void refresh(T persistentObject);

    /**
     * Saves the given object to disk.
     * @param persistentObject Object to save
	 * @param <T> A DataLayerObject-derived type
     * @return Identifier of saved object 
     */
    <T> Serializable save(T persistentObject);
    /**
     * Saves or updates the given $class.className object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to save 
     */
    <T> void saveOrUpdate(T persistentObject);
    /**
     * Updates the given object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to update 
     */
    <T> void update(T persistentObject);


    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Chapter obj) directly
     * @param id Identifier to delete
     */
    void deleteChapter(final ChapterPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Chapter object
     */
    Chapter loadChapter(final ChapterPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Chapter getChapter(final ChapterPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Location obj) directly
     * @param id Identifier to delete
     */
    void deleteLocation(final LocationPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Location object
     */
    Location loadLocation(final LocationPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Location getLocation(final LocationPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (LocationCondition obj) directly
     * @param id Identifier to delete
     */
    void deleteLocationCondition(final LocationConditionPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a LocationCondition object
     */
    LocationCondition loadLocationCondition(final LocationConditionPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     LocationCondition getLocationCondition(final LocationConditionPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (LocationRegulatedActivity obj) directly
     * @param id Identifier to delete
     */
    void deleteLocationRegulatedActivity(final LocationRegulatedActivityPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a LocationRegulatedActivity object
     */
    LocationRegulatedActivity loadLocationRegulatedActivity(final LocationRegulatedActivityPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     LocationRegulatedActivity getLocationRegulatedActivity(final LocationRegulatedActivityPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (NominatedIndividual obj) directly
     * @param id Identifier to delete
     */
    void deleteNominatedIndividual(final NominatedIndividualPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a NominatedIndividual object
     */
    NominatedIndividual loadNominatedIndividual(final NominatedIndividualPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     NominatedIndividual getNominatedIndividual(final NominatedIndividualPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Outcome obj) directly
     * @param id Identifier to delete
     */
    void deleteOutcome(final OutcomePK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Outcome object
     */
    Outcome loadOutcome(final OutcomePK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Outcome getOutcome(final OutcomePK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Partner obj) directly
     * @param id Identifier to delete
     */
    void deletePartner(final PartnerPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Partner object
     */
    Partner loadPartner(final PartnerPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Partner getPartner(final PartnerPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (Provider obj) directly
     * @param id Identifier to delete
     */
    void deleteProvider(final String id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a Provider object
     */
    Provider loadProvider(final String id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     Provider getProvider(final String id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProviderCondition obj) directly
     * @param id Identifier to delete
     */
    void deleteProviderCondition(final ProviderConditionPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProviderCondition object
     */
    ProviderCondition loadProviderCondition(final ProviderConditionPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     ProviderCondition getProviderCondition(final ProviderConditionPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ProviderRegulatedActivity obj) directly
     * @param id Identifier to delete
     */
    void deleteProviderRegulatedActivity(final ProviderRegulatedActivityPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ProviderRegulatedActivity object
     */
    ProviderRegulatedActivity loadProviderRegulatedActivity(final ProviderRegulatedActivityPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     ProviderRegulatedActivity getProviderRegulatedActivity(final ProviderRegulatedActivityPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RegisteredManager obj) directly
     * @param id Identifier to delete
     */
    void deleteRegisteredManager(final RegisteredManagerPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RegisteredManager object
     */
    RegisteredManager loadRegisteredManager(final RegisteredManagerPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     RegisteredManager getRegisteredManager(final RegisteredManagerPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (RegisteredManagerCondition obj) directly
     * @param id Identifier to delete
     */
    void deleteRegisteredManagerCondition(final RegisteredManagerConditionPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a RegisteredManagerCondition object
     */
    RegisteredManagerCondition loadRegisteredManagerCondition(final RegisteredManagerConditionPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     RegisteredManagerCondition getRegisteredManagerCondition(final RegisteredManagerConditionPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ReportSummary obj) directly
     * @param id Identifier to delete
     */
    void deleteReportSummary(final ReportSummaryPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ReportSummary object
     */
    ReportSummary loadReportSummary(final ReportSummaryPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     ReportSummary getReportSummary(final ReportSummaryPK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ServiceType obj) directly
     * @param id Identifier to delete
     */
    void deleteServiceType(final ServiceTypePK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ServiceType object
     */
    ServiceType loadServiceType(final ServiceTypePK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     ServiceType getServiceType(final ServiceTypePK id);  

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (ServiceUserBand obj) directly
     * @param id Identifier to delete
     */
    void deleteServiceUserBand(final ServiceUserBandPK id);
	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a ServiceUserBand object
     */
    ServiceUserBand loadServiceUserBand(final ServiceUserBandPK id);
    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     ServiceUserBand getServiceUserBand(final ServiceUserBandPK id);  
    /** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     Query createQuery(final String query);
    /** Returns a criteria handle.
     * @param criteria Criteria to use
     * @return A criteria instance
     */
     Criteria createCriteria(final String criteria);
    /** Returns a Query handle based on your package-level named query.
     * @param query Query to use
     * @return A query instance
     */
     Query getNamedQuery(final String query);
    /** Create a new Criteria instance, for the given entity class, or a superclass of an entity class.
	* @param persistentObject a class, which is persistent, or has persistent subclasses 
	* @return Criteria instance
	*/
	@SuppressWarnings("unchecked")
	Criteria createCriteria(Class persistentObject);
    /** Flushes the currently open session.
	*/
	void flushSession();
    /** Clears the currently open session.
	*/
	void clearSession();
    /** Flushes and clears the currently open session.
	*/
	void flushAndClearSession();
	/** Call currentSession.replicate.
	 * @param obj to replicate
	 * @param replicationMode mode
	 */ 
	void replicate(Object obj, ReplicationMode replicationMode);
	/** Hibernate Merge. 
	 * @param obj to merge
	 * @return obj merged.
	 */
	Object merge(Object obj);
	/** Returns the current session.
	 * @return the currently active session
	 */
	Session getCurrentSession();
	/** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     SQLQuery createSQLQuery(final String query);
    /** Remove this instance from the session cache. 
	 * Changes to the instance will not be synchronized with the database
	 * @param obj object to evict
	 */
	void evict(Object obj);
    /**
     * Return the persistent instance of the given entity class with the given 
     * identifier, or null if there is no such persistent instance. 
     * (If the instance, or a proxy for the instance, is already 
     * associated with the session, return that instance or proxy)
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return a persistent instance or null
     * @throws HibernateException
     */
	Object get(Class<?> clazz, Serializable id) throws HibernateException;	


    /**
     * Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
     *You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return the persistent instance or proxy
     * @throws HibernateException
     */
	Object load(Class<?> clazz, Serializable id) throws HibernateException;
	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity to reattach
	 */
	void reattachEntityWithNoLock(IPojoGenEntity entity);
	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities to attach
	 */
	void reattachEntitiesWithNoLock(Collection<? extends IPojoGenEntity> entities);}

