2012-04-30 13:36:57,518 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:514) - Hibernate 3.2.6
2012-04-30 13:36:57,528 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:547) - hibernate.properties not found
2012-04-30 13:36:57,532 [main] INFO  org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:681) - Bytecode provider name : cglib
2012-04-30 13:36:57,536 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:598) - using JDK 1.4 java.sql.Timestamp handling
2012-04-30 13:36:57,575 [main] INFO  org.hibernate.cfg.Configuration.configure(Configuration.java:1466) - configuring from file: hibernate.cfg.xml
2012-04-30 13:36:57,599 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:38) - trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
2012-04-30 13:36:57,600 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:40) - recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
2012-04-30 13:36:57,600 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:50) - located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath
2012-04-30 13:36:57,619 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.url=jdbc:mysql://localhost:3306/hibtest
2012-04-30 13:36:57,619 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.username=root
2012-04-30 13:36:57,620 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.password=root
2012-04-30 13:36:57,620 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.driver_class=com.mysql.jdbc.Driver
2012-04-30 13:36:57,620 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - dialect=org.hibernate.dialect.MySQLDialect
2012-04-30 13:36:57,621 [main] INFO  org.hibernate.cfg.Configuration.doConfigure(Configuration.java:1547) - Configured SessionFactory: null
2012-04-30 13:36:57,621 [main] DEBUG org.hibernate.cfg.Configuration.doConfigure(Configuration.java:1548) - properties: {hibernate.connection.password=root, java.runtime.name=OpenJDK Runtime Environment, sun.boot.library.path=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/amd64, java.vm.version=20.0-b11, hibernate.connection.username=root, ant.library.dir=/usr/share/ant/lib, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=:, java.vm.name=OpenJDK 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=GB, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=unknown, java.vm.specification.name=Java Virtual Machine Specification, user.dir=/home/appadmin/java/hib, java.runtime.version=1.6.0_22-b22, java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment, java.endorsed.dirs=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/endorsed, os.arch=amd64, java.io.tmpdir=/tmp, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., os.name=Linux, ant.home=/usr/share/ant, sun.jnu.encoding=UTF-8, java.library.path=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/amd64/server:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/amd64:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib, java.specification.name=Java Platform API Specification, java.class.version=50.0, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=2.6.18-238.1.1.el5, connection.password=root, user.home=/root, user.timezone=Europe/London, connection.username=root, java.awt.printerjob=sun.print.PSPrinterJob, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.class.path=/usr/share/java/ant.jar:/usr/share/java/ant-launcher.jar:/usr/share/java/jaxp_parser_impl.jar:/usr/share/java/xml-commons-apis.jar:/usr/share/java/jtidy.jar:/usr/share/java/xerces-j2.jar:/usr/share/java/xml-commons-jaxp-1.3-apis.jar:/usr/lib/jvm/java/lib/tools.jar, user.name=root, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.version=1.0, sun.java.command=org.apache.tools.ant.launch.Launcher -cp  reveng-hbm, java.home=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre, sun.arch.data.model=64, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.connection.url=jdbc:mysql://localhost:3306/hibtest, user.language=en, java.specification.vendor=Sun Microsystems Inc., java.vm.info=mixed mode, java.version=1.6.0_22, java.ext.dirs=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/ext:/usr/java/packages/lib/ext, sun.boot.class.path=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/resources.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/rt.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/jce.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/netx.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/plugin.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/rhino.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/modules/jdk.boot.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/classes, java.vendor=Sun Microsystems Inc., connection.driver_class=com.mysql.jdbc.Driver, file.separator=/, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, connection.url=jdbc:mysql://localhost:3306/hibtest, dialect=org.hibernate.dialect.MySQLDialect, sun.cpu.isalist=}
2012-04-30 13:36:57,666 [main] INFO  org.hibernate.cfg.reveng.OverrideRepository.addFile(OverrideRepository.java:108) - Override file: /home/appadmin/java/hib/conf/hibernate.reveng.xml
2012-04-30 13:36:57,668 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:38) - trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd]
2012-04-30 13:36:57,668 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:40) - recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
2012-04-30 13:36:57,669 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:50) - located [http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd] in classpath
2012-04-30 13:36:57,696 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:41) - Using Hibernate built-in connection pool (not for production use!)
2012-04-30 13:36:57,697 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:42) - Hibernate connection pool size: 20
2012-04-30 13:36:57,697 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:45) - autocommit mode: false
2012-04-30 13:36:57,704 [main] FATAL org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:65) - JDBC Driver class not found: com.mysql.jdbc.Driver
java.lang.ClassNotFoundException: com.mysql.jdbc.Driver
	at org.apache.tools.ant.AntClassLoader.findClassInComponents(AntClassLoader.java:1400)
	at org.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:1341)
	at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:1088)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:266)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:186)
	at org.hibernate.util.ReflectHelper.classForName(ReflectHelper.java:100)
	at org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:61)
	at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:124)
	at org.hibernate.connection.ConnectionProviderFactory.newConnectionProvider(ConnectionProviderFactory.java:56)
	at org.hibernate.cfg.SettingsFactory.createConnectionProvider(SettingsFactory.java:414)
	at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:62)
	at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2069)
	at org.hibernate.cfg.JDBCMetaDataConfiguration.readFromJDBC(JDBCMetaDataConfiguration.java:40)
	at org.hibernate.tool.ant.JDBCConfigurationTask.doConfiguration(JDBCConfigurationTask.java:81)
	at org.hibernate.tool.ant.ConfigurationTask.getConfiguration(ConfigurationTask.java:55)
	at org.hibernate.tool.ant.HibernateToolTask.getConfiguration(HibernateToolTask.java:302)
	at org.hibernate.tool.ant.HibernateToolTask.getProperties(HibernateToolTask.java:318)
	at org.hibernate.tool.ant.ExporterTask.configureExporter(ExporterTask.java:94)
	at org.hibernate.tool.ant.ExporterTask.execute(ExporterTask.java:39)
	at org.hibernate.tool.ant.HibernateToolTask.execute(HibernateToolTask.java:186)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1337)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1306)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1189)
	at org.apache.tools.ant.Main.runBuild(Main.java:758)
	at org.apache.tools.ant.Main.startAnt(Main.java:217)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
2012-04-30 13:37:55,994 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:514) - Hibernate 3.2.6
2012-04-30 13:37:56,003 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:547) - hibernate.properties not found
2012-04-30 13:37:56,006 [main] INFO  org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:681) - Bytecode provider name : cglib
2012-04-30 13:37:56,009 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:598) - using JDK 1.4 java.sql.Timestamp handling
2012-04-30 13:37:56,049 [main] INFO  org.hibernate.cfg.Configuration.configure(Configuration.java:1466) - configuring from file: hibernate.cfg.xml
2012-04-30 13:37:56,073 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:38) - trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd]
2012-04-30 13:37:56,074 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:40) - recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
2012-04-30 13:37:56,074 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:50) - located [http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd] in classpath
2012-04-30 13:37:56,091 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.url=jdbc:mysql://localhost:3306/hibtest
2012-04-30 13:37:56,092 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.username=root
2012-04-30 13:37:56,092 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.password=root
2012-04-30 13:37:56,092 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - connection.driver_class=com.mysql.jdbc.Driver
2012-04-30 13:37:56,093 [main] DEBUG org.hibernate.cfg.Configuration.addProperties(Configuration.java:1393) - dialect=org.hibernate.dialect.MySQLDialect
2012-04-30 13:37:56,093 [main] INFO  org.hibernate.cfg.Configuration.doConfigure(Configuration.java:1547) - Configured SessionFactory: null
2012-04-30 13:37:56,094 [main] DEBUG org.hibernate.cfg.Configuration.doConfigure(Configuration.java:1548) - properties: {hibernate.connection.password=root, java.runtime.name=OpenJDK Runtime Environment, sun.boot.library.path=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/amd64, java.vm.version=20.0-b11, hibernate.connection.username=root, ant.library.dir=/usr/share/ant/lib, java.vm.vendor=Sun Microsystems Inc., java.vendor.url=http://java.sun.com/, path.separator=:, java.vm.name=OpenJDK 64-Bit Server VM, file.encoding.pkg=sun.io, user.country=GB, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=unknown, java.vm.specification.name=Java Virtual Machine Specification, user.dir=/home/appadmin/java/hib, java.runtime.version=1.6.0_22-b22, java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment, java.endorsed.dirs=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/endorsed, os.arch=amd64, java.io.tmpdir=/tmp, line.separator=
, java.vm.specification.vendor=Sun Microsystems Inc., os.name=Linux, ant.home=/usr/share/ant, sun.jnu.encoding=UTF-8, java.library.path=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/amd64/server:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/amd64:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib, java.specification.name=Java Platform API Specification, java.class.version=50.0, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, os.version=2.6.18-238.1.1.el5, connection.password=root, user.home=/root, user.timezone=Europe/London, connection.username=root, java.awt.printerjob=sun.print.PSPrinterJob, file.encoding=UTF-8, java.specification.version=1.6, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.class.path=/usr/share/java/ant.jar:/usr/share/java/ant-launcher.jar:/usr/share/java/jaxp_parser_impl.jar:/usr/share/java/xml-commons-apis.jar:/usr/share/java/jtidy.jar:/usr/share/java/xerces-j2.jar:/usr/share/java/xml-commons-jaxp-1.3-apis.jar:/usr/lib/jvm/java/lib/tools.jar, user.name=root, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.version=1.0, sun.java.command=org.apache.tools.ant.launch.Launcher -cp  reveng-hbm, java.home=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre, sun.arch.data.model=64, hibernate.dialect=org.hibernate.dialect.MySQLDialect, hibernate.connection.url=jdbc:mysql://localhost:3306/hibtest, user.language=en, java.specification.vendor=Sun Microsystems Inc., java.vm.info=mixed mode, java.version=1.6.0_22, java.ext.dirs=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/ext:/usr/java/packages/lib/ext, sun.boot.class.path=/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/resources.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/rt.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/jsse.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/jce.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/charsets.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/netx.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/plugin.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/rhino.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/lib/modules/jdk.boot.jar:/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64/jre/classes, java.vendor=Sun Microsystems Inc., connection.driver_class=com.mysql.jdbc.Driver, file.separator=/, java.vendor.url.bug=http://java.sun.com/cgi-bin/bugreport.cgi, sun.io.unicode.encoding=UnicodeLittle, sun.cpu.endian=little, connection.url=jdbc:mysql://localhost:3306/hibtest, dialect=org.hibernate.dialect.MySQLDialect, sun.cpu.isalist=}
2012-04-30 13:37:56,137 [main] INFO  org.hibernate.cfg.reveng.OverrideRepository.addFile(OverrideRepository.java:108) - Override file: /home/appadmin/java/hib/conf/hibernate.reveng.xml
2012-04-30 13:37:56,140 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:38) - trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd]
2012-04-30 13:37:56,140 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:40) - recognized hibernate namespace; attempting to resolve on classpath under org/hibernate/
2012-04-30 13:37:56,140 [main] DEBUG org.hibernate.util.DTDEntityResolver.resolveEntity(DTDEntityResolver.java:50) - located [http://hibernate.sourceforge.net/hibernate-reverse-engineering-3.0.dtd] in classpath
2012-04-30 13:37:56,167 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:41) - Using Hibernate built-in connection pool (not for production use!)
2012-04-30 13:37:56,167 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:42) - Hibernate connection pool size: 20
2012-04-30 13:37:56,168 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:45) - autocommit mode: false
2012-04-30 13:37:56,174 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:80) - using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://localhost:3306/hibtest
2012-04-30 13:37:56,175 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.configure(DriverManagerConnectionProvider.java:83) - connection properties: {user=root, password=root}
2012-04-30 13:37:56,175 [main] DEBUG org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:109) - opening new JDBC connection
2012-04-30 13:37:56,386 [main] DEBUG org.hibernate.connection.DriverManagerConnectionProvider.getConnection(DriverManagerConnectionProvider.java:115) - created connection to: jdbc:mysql://localhost:3306/hibtest, Isolation Level: 4
2012-04-30 13:37:56,387 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:89) - RDBMS: MySQL, version: 5.5.20-ndb-7.2.5-gpl
2012-04-30 13:37:56,388 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:90) - JDBC driver: MySQL-AB JDBC Driver, version: mysql-connector-java-5.1.12 ( Revision: ${bzr.revision-id} )
2012-04-30 13:37:56,403 [main] INFO  org.hibernate.dialect.Dialect.<init>(Dialect.java:152) - Using dialect: org.hibernate.dialect.MySQLDialect
2012-04-30 13:37:56,431 [main] INFO  org.hibernate.transaction.TransactionFactoryFactory.buildTransactionFactory(TransactionFactoryFactory.java:31) - Using default transaction strategy (direct JDBC transactions)
2012-04-30 13:37:56,433 [main] INFO  org.hibernate.transaction.TransactionManagerLookupFactory.getTransactionManagerLookup(TransactionManagerLookupFactory.java:33) - No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
2012-04-30 13:37:56,434 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:143) - Automatic flush during beforeCompletion(): disabled
2012-04-30 13:37:56,434 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:147) - Automatic session close at end of transaction: disabled
2012-04-30 13:37:56,435 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:154) - JDBC batch size: 15
2012-04-30 13:37:56,435 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:157) - JDBC batch updates for versioned data: disabled
2012-04-30 13:37:56,436 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:162) - Scrollable result sets: enabled
2012-04-30 13:37:56,436 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:166) - Wrap result sets: disabled
2012-04-30 13:37:56,437 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:170) - JDBC3 getGeneratedKeys(): enabled
2012-04-30 13:37:56,437 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:178) - Connection release mode: auto
2012-04-30 13:37:56,438 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:202) - Maximum outer join fetch depth: 2
2012-04-30 13:37:56,439 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:205) - Default batch fetch size: 1
2012-04-30 13:37:56,439 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:209) - Generate SQL with comments: disabled
2012-04-30 13:37:56,440 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:213) - Order SQL updates by primary key: disabled
2012-04-30 13:37:56,440 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:217) - Order SQL inserts for batching: disabled
2012-04-30 13:37:56,441 [main] INFO  org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:386) - Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
2012-04-30 13:37:56,443 [main] INFO  org.hibernate.hql.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:24) - Using ASTQueryTranslatorFactory
2012-04-30 13:37:56,443 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:225) - Query language substitutions: {}
2012-04-30 13:37:56,444 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:230) - JPA-QL strict compliance: disabled
2012-04-30 13:37:56,444 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:235) - Second-level cache: enabled
2012-04-30 13:37:56,445 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:239) - Query cache: disabled
2012-04-30 13:37:56,445 [main] INFO  org.hibernate.cfg.SettingsFactory.createCacheProvider(SettingsFactory.java:373) - Cache provider: org.hibernate.cache.NoCacheProvider
2012-04-30 13:37:56,446 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:254) - Optimize cache for minimal puts: disabled
2012-04-30 13:37:56,447 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:263) - Structured second-level cache entries: disabled
2012-04-30 13:37:56,450 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:290) - Statistics: disabled
2012-04-30 13:37:56,451 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:294) - Deleted entity synthetic identifier rollback: disabled
2012-04-30 13:37:56,451 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:309) - Default entity-mode: pojo
2012-04-30 13:37:56,452 [main] INFO  org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:313) - Named query checking : enabled
2012-04-30 13:37:56,466 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getTables(JDBCMetaDataDialect.java:26) - getTables(null.null.null)
2012-04-30 13:37:56,485 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table chapter of type TABLE
2012-04-30 13:37:56,487 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table compliance_condition of type TABLE
2012-04-30 13:37:56,488 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table judgement_method of type TABLE
2012-04-30 13:37:56,488 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table location of type TABLE
2012-04-30 13:37:56,488 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table nominated_individual of type TABLE
2012-04-30 13:37:56,489 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table outcome of type TABLE
2012-04-30 13:37:56,489 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table partner of type TABLE
2012-04-30 13:37:56,489 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table provider of type TABLE
2012-04-30 13:37:56,490 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table registered_manager of type TABLE
2012-04-30 13:37:56,490 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table regulated_activity of type TABLE
2012-04-30 13:37:56,490 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table routine_condition of type TABLE
2012-04-30 13:37:56,491 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table service_type of type TABLE
2012-04-30 13:37:56,491 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processTables(JDBCReader.java:550) - Adding table service_user_band of type TABLE
2012-04-30 13:37:56,491 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.chapter
2012-04-30 13:37:56,492 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.chapter.null)
2012-04-30 13:37:56,540 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.chapter)
2012-04-30 13:37:56,545 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.chapter)
2012-04-30 13:37:56,582 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.chapter) -> org.hibernate.mapping.PrimaryKey(chapter[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(chapter_id)]) as PRIMARY
2012-04-30 13:37:56,582 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.chapter)
2012-04-30 13:37:56,587 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.compliance_condition
2012-04-30 13:37:56,587 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.compliance_condition.null)
2012-04-30 13:37:56,596 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.compliance_condition)
2012-04-30 13:37:56,598 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.compliance_condition)
2012-04-30 13:37:56,600 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.compliance_condition) -> org.hibernate.mapping.PrimaryKey(compliance_condition[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(condition_id)]) as PRIMARY
2012-04-30 13:37:56,600 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.compliance_condition)
2012-04-30 13:37:56,603 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.judgement_method
2012-04-30 13:37:56,603 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.judgement_method.null)
2012-04-30 13:37:56,608 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.judgement_method)
2012-04-30 13:37:56,610 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.judgement_method)
2012-04-30 13:37:56,612 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.judgement_method) -> org.hibernate.mapping.PrimaryKey(judgement_method[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(outcome_id), org.hibernate.mapping.Column(method_id)]) as PRIMARY
2012-04-30 13:37:56,612 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.judgement_method)
2012-04-30 13:37:56,615 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.location
2012-04-30 13:37:56,615 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.location.null)
2012-04-30 13:37:56,625 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.location)
2012-04-30 13:37:56,626 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.location)
2012-04-30 13:37:56,628 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.location) -> org.hibernate.mapping.PrimaryKey(location[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id)]) as PRIMARY
2012-04-30 13:37:56,628 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.location)
2012-04-30 13:37:56,630 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.nominated_individual
2012-04-30 13:37:56,630 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.nominated_individual.null)
2012-04-30 13:37:56,634 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.nominated_individual)
2012-04-30 13:37:56,636 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.nominated_individual)
2012-04-30 13:37:56,637 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.nominated_individual) -> org.hibernate.mapping.PrimaryKey(nominated_individual[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(regulated_activity_id)]) as PRIMARY
2012-04-30 13:37:56,638 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.nominated_individual)
2012-04-30 13:37:56,640 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.outcome
2012-04-30 13:37:56,640 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.outcome.null)
2012-04-30 13:37:56,650 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.outcome)
2012-04-30 13:37:56,652 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.outcome)
2012-04-30 13:37:56,653 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.outcome) -> org.hibernate.mapping.PrimaryKey(outcome[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(outcome_id)]) as PRIMARY
2012-04-30 13:37:56,654 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.outcome)
2012-04-30 13:37:56,664 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.partner
2012-04-30 13:37:56,664 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.partner.null)
2012-04-30 13:37:56,668 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.partner)
2012-04-30 13:37:56,670 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.partner)
2012-04-30 13:37:56,672 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.partner) -> org.hibernate.mapping.PrimaryKey(partner[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(partner_id)]) as PRIMARY
2012-04-30 13:37:56,672 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.partner)
2012-04-30 13:37:56,674 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.provider
2012-04-30 13:37:56,674 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.provider.null)
2012-04-30 13:37:56,689 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.provider)
2012-04-30 13:37:56,693 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.provider)
2012-04-30 13:37:56,694 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.provider) -> org.hibernate.mapping.PrimaryKey(provider[org.hibernate.mapping.Column(provider_id)]) as PRIMARY
2012-04-30 13:37:56,694 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.provider)
2012-04-30 13:37:56,695 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.registered_manager
2012-04-30 13:37:56,696 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.registered_manager.null)
2012-04-30 13:37:56,699 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.registered_manager)
2012-04-30 13:37:56,700 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.registered_manager)
2012-04-30 13:37:56,701 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.registered_manager) -> org.hibernate.mapping.PrimaryKey(registered_manager[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(regulated_activity_id)]) as PRIMARY
2012-04-30 13:37:56,702 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.registered_manager)
2012-04-30 13:37:56,704 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.regulated_activity
2012-04-30 13:37:56,704 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.regulated_activity.null)
2012-04-30 13:37:56,707 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.regulated_activity)
2012-04-30 13:37:56,708 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.regulated_activity)
2012-04-30 13:37:56,709 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.regulated_activity) -> org.hibernate.mapping.PrimaryKey(regulated_activity[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(regulated_activity_id)]) as PRIMARY
2012-04-30 13:37:56,710 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.regulated_activity)
2012-04-30 13:37:56,711 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.routine_condition
2012-04-30 13:37:56,711 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.routine_condition.null)
2012-04-30 13:37:56,715 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.routine_condition)
2012-04-30 13:37:56,716 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.routine_condition)
2012-04-30 13:37:56,717 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.routine_condition) -> org.hibernate.mapping.PrimaryKey(routine_condition[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(condition_id)]) as PRIMARY
2012-04-30 13:37:56,718 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.routine_condition)
2012-04-30 13:37:56,721 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.service_type
2012-04-30 13:37:56,721 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.service_type.null)
2012-04-30 13:37:56,724 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.service_type)
2012-04-30 13:37:56,726 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.service_type)
2012-04-30 13:37:56,727 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.service_type) -> org.hibernate.mapping.PrimaryKey(service_type[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(service_type_id)]) as PRIMARY
2012-04-30 13:37:56,727 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.service_type)
2012-04-30 13:37:56,732 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processBasicColumns(JDBCReader.java:576) - Finding columns for hibtest.service_user_band
2012-04-30 13:37:56,733 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getColumns(JDBCMetaDataDialect.java:123) - getColumns(hibtest.null.service_user_band.null)
2012-04-30 13:37:56,735 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getPrimaryKeys(JDBCMetaDataDialect.java:156) - getPrimaryKeys(hibtest.null.service_user_band)
2012-04-30 13:37:56,736 [main] DEBUG org.hibernate.cfg.reveng.dialect.MySQLMetaDataDialect.getSuggestedPrimaryKeyStrategyName(MySQLMetaDataDialect.java:23) - geSuggestedPrimaryKeyStrategyName(hibtest.null.service_user_band)
2012-04-30 13:37:56,738 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processPrimaryKey(JDBCReader.java:456) - primary key for org.hibernate.mapping.Table(hibtest.service_user_band) -> org.hibernate.mapping.PrimaryKey(service_user_band[org.hibernate.mapping.Column(provider_id), org.hibernate.mapping.Column(location_id), org.hibernate.mapping.Column(service_user_band_id)]) as PRIMARY
2012-04-30 13:37:56,738 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getIndexInfo(JDBCMetaDataDialect.java:86) - getIndexInfo(hibtest.null.service_user_band)
2012-04-30 13:37:56,741 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.chapter)
2012-04-30 13:37:56,741 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.chapter)
2012-04-30 13:37:56,748 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.compliance_condition)
2012-04-30 13:37:56,749 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.compliance_condition)
2012-04-30 13:37:56,754 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.judgement_method)
2012-04-30 13:37:56,754 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.judgement_method)
2012-04-30 13:37:56,759 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.location)
2012-04-30 13:37:56,759 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.location)
2012-04-30 13:37:56,764 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.nominated_individual)
2012-04-30 13:37:56,764 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.nominated_individual)
2012-04-30 13:37:56,769 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.outcome)
2012-04-30 13:37:56,770 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.outcome)
2012-04-30 13:37:56,775 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.partner)
2012-04-30 13:37:56,775 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.partner)
2012-04-30 13:37:56,780 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.provider)
2012-04-30 13:37:56,781 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.provider)
2012-04-30 13:37:56,786 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.registered_manager)
2012-04-30 13:37:56,786 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.registered_manager)
2012-04-30 13:37:56,791 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.regulated_activity)
2012-04-30 13:37:56,791 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.regulated_activity)
2012-04-30 13:37:56,796 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.routine_condition)
2012-04-30 13:37:56,796 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.routine_condition)
2012-04-30 13:37:56,801 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.service_type)
2012-04-30 13:37:56,802 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.service_type)
2012-04-30 13:37:56,810 [main] DEBUG org.hibernate.cfg.reveng.JDBCReader.processForeignKeys(JDBCReader.java:181) - Calling getExportedKeys on org.hibernate.mapping.Table(hibtest.service_user_band)
2012-04-30 13:37:56,810 [main] DEBUG org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect.getExportedKeys(JDBCMetaDataDialect.java:185) - getExportedKeys(hibtest.null.service_user_band)
2012-04-30 13:37:56,818 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.Chapter since it has a multiple column primary key
2012-04-30 13:37:56,821 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.chapter.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,831 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,833 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.chapter.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,834 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:56,834 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.chapter.chapter_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,834 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property chapterId
2012-04-30 13:37:56,835 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,836 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.chapter) for <version>/<timestamp> columns.
2012-04-30 13:37:56,837 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.chapter)
2012-04-30 13:37:56,837 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.chapter.chapter_score t:INTEGER l:255 p:19 s:2 n:true id:false] to [java.lang.Integer]
2012-04-30 13:37:56,838 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property chapterScore
2012-04-30 13:37:56,838 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.chapter.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,838 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.chapter column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,839 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,839 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.chapter.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,839 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,840 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.ComplianceCondition since it has a multiple column primary key
2012-04-30 13:37:56,840 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,840 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,841 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,841 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:56,841 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.condition_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,841 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property conditionId
2012-04-30 13:37:56,842 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,842 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.compliance_condition) for <version>/<timestamp> columns.
2012-04-30 13:37:56,842 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.compliance_condition)
2012-04-30 13:37:56,843 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.regulated_activity_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,843 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property regulatedActivityId
2012-04-30 13:37:56,843 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.compliance_condition t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,844 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.compliance_condition column: compliance_condition between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,844 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property complianceCondition
2012-04-30 13:37:56,844 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.compliance_reason t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,845 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.compliance_condition column: compliance_reason between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,845 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property complianceReason
2012-04-30 13:37:56,845 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,845 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.compliance_condition column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,846 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,846 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.compliance_condition.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,846 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,847 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.JudgementMethod since it has a multiple column primary key
2012-04-30 13:37:56,847 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,847 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,848 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,848 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:56,848 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.outcome_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,849 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property outcomeId
2012-04-30 13:37:56,849 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.method_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,849 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property methodId
2012-04-30 13:37:56,858 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,864 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.judgement_method) for <version>/<timestamp> columns.
2012-04-30 13:37:56,870 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.judgement_method)
2012-04-30 13:37:56,870 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.method_text t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,870 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.judgement_method column: method_text between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,957 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property methodText
2012-04-30 13:37:56,958 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,958 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.judgement_method column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,958 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,958 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.judgement_method.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,958 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,959 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.Location since it has a multiple column primary key
2012-04-30 13:37:56,959 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,959 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,959 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,959 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:56,960 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,960 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.location) for <version>/<timestamp> columns.
2012-04-30 13:37:56,960 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.location)
2012-04-30 13:37:56,960 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_name t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,960 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: location_name between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,961 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationName
2012-04-30 13:37:56,961 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.in_process t:VARCHAR l:1 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,961 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property inProcess
2012-04-30 13:37:56,961 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_type t:VARCHAR l:50 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,961 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationType
2012-04-30 13:37:56,962 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.also_known_as t:VARCHAR l:100 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,962 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property alsoKnownAs
2012-04-30 13:37:56,962 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.address1 t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,962 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property address1
2012-04-30 13:37:56,963 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.address2 t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,963 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property address2
2012-04-30 13:37:56,963 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.towncity t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,963 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property towncity
2012-04-30 13:37:56,963 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.county t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,964 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property county
2012-04-30 13:37:56,964 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.postcode t:VARCHAR l:16 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,964 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property postcode
2012-04-30 13:37:56,964 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.latitude t:DECIMAL l:255 p:10 s:8 n:true id:false] to [big_decimal]
2012-04-30 13:37:56,965 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: latitude between DB and wanted hibernate type. Sql type set to 3(DECIMAL) instead of 2(NUMERIC)
2012-04-30 13:37:56,965 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property latitude
2012-04-30 13:37:56,965 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.longitude t:DECIMAL l:255 p:10 s:8 n:true id:false] to [big_decimal]
2012-04-30 13:37:56,965 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: longitude between DB and wanted hibernate type. Sql type set to 3(DECIMAL) instead of 2(NUMERIC)
2012-04-30 13:37:56,965 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property longitude
2012-04-30 13:37:56,966 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.type_info_1 t:VARCHAR l:50 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,966 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property typeInfo1
2012-04-30 13:37:56,966 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.type_info_2 t:VARCHAR l:50 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,966 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property typeInfo2
2012-04-30 13:37:56,967 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.telephone t:VARCHAR l:20 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,967 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property telephone
2012-04-30 13:37:56,967 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.email t:VARCHAR l:100 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,967 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property email
2012-04-30 13:37:56,967 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.website t:VARCHAR l:100 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,968 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property website
2012-04-30 13:37:56,973 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.fax t:VARCHAR l:20 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,973 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property fax
2012-04-30 13:37:56,974 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.under_review_text t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,974 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: under_review_text between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,974 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property underReviewText
2012-04-30 13:37:56,974 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_user_experience t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,975 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: location_user_experience between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,975 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationUserExperience
2012-04-30 13:37:56,975 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_license_information t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,975 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: location_license_information between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,975 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationLicenseInformation
2012-04-30 13:37:56,976 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_statement_date t:VARCHAR l:20 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,976 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationStatementDate
2012-04-30 13:37:56,976 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.location_statement_id t:VARCHAR l:30 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,976 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationStatementId
2012-04-30 13:37:56,977 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,977 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.location column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,977 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,977 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.location.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,978 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,978 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.NominatedIndividual since it has a multiple column primary key
2012-04-30 13:37:56,978 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.nominated_individual.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,978 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,978 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.nominated_individual.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,979 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:56,979 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.nominated_individual.regulated_activity_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,979 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property regulatedActivityId
2012-04-30 13:37:56,979 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,979 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.nominated_individual) for <version>/<timestamp> columns.
2012-04-30 13:37:56,980 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.nominated_individual)
2012-04-30 13:37:56,980 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.nominated_individual.nominated_individual t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,980 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.nominated_individual column: nominated_individual between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,980 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property nominatedIndividual
2012-04-30 13:37:56,980 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.nominated_individual.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,981 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.nominated_individual column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,981 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,981 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.nominated_individual.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,981 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,981 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.Outcome since it has a multiple column primary key
2012-04-30 13:37:56,982 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,982 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,982 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,982 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:56,983 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.outcome_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,983 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property outcomeId
2012-04-30 13:37:56,983 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,983 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.outcome) for <version>/<timestamp> columns.
2012-04-30 13:37:56,983 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.outcome)
2012-04-30 13:37:56,984 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_id t:VARCHAR l:30 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,984 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementId
2012-04-30 13:37:56,984 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_date t:VARCHAR l:20 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,984 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementDate
2012-04-30 13:37:56,984 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_reason t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,985 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.outcome column: judgement_reason between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,985 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementReason
2012-04-30 13:37:56,985 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_user_experience t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,985 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.outcome column: judgement_user_experience between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,985 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementUserExperience
2012-04-30 13:37:56,986 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_other_evidence t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,986 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.outcome column: judgement_other_evidence between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,986 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementOtherEvidence
2012-04-30 13:37:56,986 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_score_id t:VARCHAR l:30 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,987 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementScoreId
2012-04-30 13:37:56,988 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.outcome_statement_id t:VARCHAR l:30 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,989 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property outcomeStatementId
2012-04-30 13:37:56,989 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.judgement_summary t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,989 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.outcome column: judgement_summary between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,989 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property judgementSummary
2012-04-30 13:37:56,989 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,990 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.outcome column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,990 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,990 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.outcome.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,990 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,991 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.Partner since it has a multiple column primary key
2012-04-30 13:37:56,991 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.partner.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,991 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,991 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.partner.partner_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,991 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property partnerId
2012-04-30 13:37:56,992 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:56,992 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.partner) for <version>/<timestamp> columns.
2012-04-30 13:37:56,992 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.partner)
2012-04-30 13:37:56,992 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.partner.partner_name t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,992 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.partner column: partner_name between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,993 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property partnerName
2012-04-30 13:37:56,993 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.partner.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,993 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.partner column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,993 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:56,993 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.partner.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:56,994 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:56,994 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:56,994 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:56,994 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.provider) for <version>/<timestamp> columns.
2012-04-30 13:37:56,995 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.provider)
2012-04-30 13:37:56,995 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.provider_name t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,995 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.provider column: provider_name between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:56,995 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerName
2012-04-30 13:37:56,995 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.in_process t:VARCHAR l:1 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,996 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property inProcess
2012-04-30 13:37:56,996 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.provider_type t:VARCHAR l:50 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,996 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerType
2012-04-30 13:37:56,996 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.also_known_as t:VARCHAR l:100 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,996 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property alsoKnownAs
2012-04-30 13:37:56,997 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.address1 t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,997 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property address1
2012-04-30 13:37:56,997 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.address2 t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,997 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property address2
2012-04-30 13:37:56,998 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.towncity t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,998 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property towncity
2012-04-30 13:37:56,998 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.county t:VARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,998 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property county
2012-04-30 13:37:56,998 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.postcode t:VARCHAR l:16 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:56,999 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property postcode
2012-04-30 13:37:56,999 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.latitude t:DECIMAL l:255 p:10 s:8 n:true id:false] to [big_decimal]
2012-04-30 13:37:56,999 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.provider column: latitude between DB and wanted hibernate type. Sql type set to 3(DECIMAL) instead of 2(NUMERIC)
2012-04-30 13:37:56,999 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property latitude
2012-04-30 13:37:56,999 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.longitude t:DECIMAL l:255 p:10 s:8 n:true id:false] to [big_decimal]
2012-04-30 13:37:56,999 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.provider column: longitude between DB and wanted hibernate type. Sql type set to 3(DECIMAL) instead of 2(NUMERIC)
2012-04-30 13:37:57,000 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property longitude
2012-04-30 13:37:57,000 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.type_info_1 t:VARCHAR l:50 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,000 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property typeInfo1
2012-04-30 13:37:57,000 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.type_info_2 t:VARCHAR l:50 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,001 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property typeInfo2
2012-04-30 13:37:57,001 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.under_review_text t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,001 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.provider column: under_review_text between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,001 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property underReviewText
2012-04-30 13:37:57,001 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.telephone t:VARCHAR l:20 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,002 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property telephone
2012-04-30 13:37:57,002 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.email t:VARCHAR l:100 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,002 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property email
2012-04-30 13:37:57,002 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.website t:VARCHAR l:100 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,002 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property website
2012-04-30 13:37:57,003 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.fax t:VARCHAR l:20 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,003 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property fax
2012-04-30 13:37:57,003 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.is_partnership t:VARCHAR l:1 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,003 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property isPartnership
2012-04-30 13:37:57,004 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,004 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.provider column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,004 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:57,004 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.provider.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:57,004 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:57,005 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.RegisteredManager since it has a multiple column primary key
2012-04-30 13:37:57,005 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,005 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:57,005 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,005 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:57,006 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.regulated_activity_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,006 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property regulatedActivityId
2012-04-30 13:37:57,006 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:57,006 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.registered_manager) for <version>/<timestamp> columns.
2012-04-30 13:37:57,006 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.registered_manager)
2012-04-30 13:37:57,007 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.manager_name t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,007 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.registered_manager column: manager_name between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,007 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property managerName
2012-04-30 13:37:57,007 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.manager_condition t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,007 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.registered_manager column: manager_condition between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,008 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property managerCondition
2012-04-30 13:37:57,008 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,008 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.registered_manager column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,008 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:57,008 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.registered_manager.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:57,009 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:57,009 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.RegulatedActivity since it has a multiple column primary key
2012-04-30 13:37:57,009 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.regulated_activity.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,009 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:57,009 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.regulated_activity.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,010 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:57,010 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.regulated_activity.regulated_activity_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,010 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property regulatedActivityId
2012-04-30 13:37:57,010 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:57,010 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.regulated_activity) for <version>/<timestamp> columns.
2012-04-30 13:37:57,010 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.regulated_activity)
2012-04-30 13:37:57,011 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.regulated_activity.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,011 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.regulated_activity column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,011 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:57,011 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.regulated_activity.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:57,011 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:57,012 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.RoutineCondition since it has a multiple column primary key
2012-04-30 13:37:57,012 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,012 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:57,012 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,012 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:57,013 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.condition_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,013 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property conditionId
2012-04-30 13:37:57,013 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:57,013 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.routine_condition) for <version>/<timestamp> columns.
2012-04-30 13:37:57,013 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.routine_condition)
2012-04-30 13:37:57,014 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.regulated_activity_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,014 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property regulatedActivityId
2012-04-30 13:37:57,015 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.routine_condition t:LONGVARCHAR l:255 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,015 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.routine_condition column: routine_condition between DB and wanted hibernate type. Sql type set to -1(LONGVARCHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,015 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property routineCondition
2012-04-30 13:37:57,015 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,015 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.routine_condition column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,015 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:57,016 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.routine_condition.action t:CHAR l:1 p:19 s:2 n:true id:false] to [java.lang.Character]
2012-04-30 13:37:57,016 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property action
2012-04-30 13:37:57,016 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.ServiceType since it has a multiple column primary key
2012-04-30 13:37:57,016 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_type.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,016 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:57,017 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_type.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,017 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:57,017 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_type.service_type_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,017 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property serviceTypeId
2012-04-30 13:37:57,018 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:57,018 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.service_type) for <version>/<timestamp> columns.
2012-04-30 13:37:57,018 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.service_type)
2012-04-30 13:37:57,018 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_type.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,018 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.service_type column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,018 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:57,019 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindPrimaryKeyToProperties(JDBCBinder.java:427) - id strategy for org.cqc.ServiceUserBand since it has a multiple column primary key
2012-04-30 13:37:57,019 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_user_band.provider_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,019 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property providerId
2012-04-30 13:37:57,019 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_user_band.location_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,019 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property locationId
2012-04-30 13:37:57,020 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_user_band.service_user_band_id t:VARCHAR l:30 p:19 s:2 n:false id:false] to [string]
2012-04-30 13:37:57,020 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property serviceUserBandId
2012-04-30 13:37:57,020 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property id
2012-04-30 13:37:57,020 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:566) - Scanning TableIdentifier(hibtest.service_user_band) for <version>/<timestamp> columns.
2012-04-30 13:37:57,020 [main] DEBUG org.hibernate.cfg.JDBCBinder.bindColumnsToVersioning(JDBCBinder.java:576) - No columns reported while scanning for <version>/<timestamp> columns in TableIdentifier(hibtest.service_user_band)
2012-04-30 13:37:57,021 [main] DEBUG org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy.columnToHibernateTypeName(DefaultReverseEngineeringStrategy.java:114) - Default type found for [hibtest.service_user_band.hashvalue t:CHAR l:32 p:19 s:2 n:true id:false] to [string]
2012-04-30 13:37:57,021 [main] DEBUG org.hibernate.cfg.JDBCBinder.guessAndAlignType(JDBCBinder.java:659) - Sql type mismatch for Table: hibtest.service_user_band column: hashvalue between DB and wanted hibernate type. Sql type set to 1(CHAR) instead of 12(VARCHAR)
2012-04-30 13:37:57,021 [main] DEBUG org.hibernate.cfg.JDBCBinder.makeProperty(JDBCBinder.java:827) - Building property hashvalue
2012-04-30 13:37:57,021 [main] INFO  org.hibernate.connection.DriverManagerConnectionProvider.close(DriverManagerConnectionProvider.java:147) - cleaning up connection pool: jdbc:mysql://localhost:3306/hibtest
2012-04-30 13:37:57,023 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1126) - processing extends queue
2012-04-30 13:37:57,027 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1130) - processing collection mappings
2012-04-30 13:37:57,027 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1141) - processing native query and ResultSetMapping mappings
2012-04-30 13:37:57,027 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1149) - processing association property references
2012-04-30 13:37:57,027 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1171) - processing foreign key constraints
2012-04-30 13:37:57,030 [main] DEBUG org.hibernate.tool.hbm2x.AbstractExporter.setupTemplates(AbstractExporter.java:138) - org.hibernate.tool.hbm2x.HibernateMappingExporter outputdir:/home/appadmin/java/hib/output path: [/home/appadmin/java/hib/templates]
2012-04-30 13:37:57,128 [main] INFO  org.hibernate.tool.Version.<clinit>(Version.java:15) - Hibernate Tools 3.2.2.GA
2012-04-30 13:37:57,138 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,141 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/hibernate-mapping.hbm.ftl
2012-04-30 13:37:57,292 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,293 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/persistentclass.hbm.ftl
2012-04-30 13:37:57,340 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,344 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,345 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/meta.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/meta.hbm.ftl
2012-04-30 13:37:57,368 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/id.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,369 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/id.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/id.hbm.ftl
2012-04-30 13:37:57,502 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,503 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/pkcolumn.hbm.ftl
2012-04-30 13:37:57,504 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,505 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,557 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/property.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,559 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/property.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/property.hbm.ftl
2012-04-30 13:37:57,563 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,563 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Could not find template in cache, creating new one; id=[hbm/column.hbm.ftl[en_GB,UTF-8,parsed] ]
2012-04-30 13:37:57,565 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Compiling FreeMarker template hbm/column.hbm.ftl[en_GB,UTF-8,parsed]  from /home/appadmin/java/hib/templates/hbm/column.hbm.ftl
2012-04-30 13:37:57,566 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,567 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,567 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,568 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,568 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,568 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,569 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,569 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,569 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,570 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/RegisteredManager.hbm.xml
2012-04-30 13:37:57,570 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,571 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,573 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,574 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,575 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,576 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,576 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,577 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,577 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,578 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,578 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,579 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,579 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,580 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,580 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,580 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,581 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,581 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/Chapter.hbm.xml
2012-04-30 13:37:57,581 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,582 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,584 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,585 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,585 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,586 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,587 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,588 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,589 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,590 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,590 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,590 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,591 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,591 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,592 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,592 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,593 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,593 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,593 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/JudgementMethod.hbm.xml
2012-04-30 13:37:57,594 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,594 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,597 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,597 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,598 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,598 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,599 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,599 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,600 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,600 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,600 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,601 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,602 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,602 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,602 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,603 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,603 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,603 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,604 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,604 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,605 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,605 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,605 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,606 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/ComplianceCondition.hbm.xml
2012-04-30 13:37:57,606 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,606 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,615 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,616 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,616 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,617 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,617 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,618 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,619 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,658 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,659 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,660 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,660 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,660 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,661 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/RegulatedActivity.hbm.xml
2012-04-30 13:37:57,661 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,661 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,666 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,674 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,674 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,674 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,675 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,675 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,676 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,676 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,676 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,677 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,677 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,677 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,678 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,678 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,678 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,680 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,680 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,680 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,681 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,681 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,682 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,682 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,682 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,683 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,683 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,683 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,684 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,684 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,685 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,685 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,687 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,687 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,687 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,688 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,688 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,688 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,689 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,689 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,690 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,690 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,690 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,691 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,691 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,691 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,692 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,692 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,692 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,693 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,693 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,694 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,694 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,694 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,695 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,695 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,695 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,696 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,696 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,697 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,697 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,697 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,698 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,698 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,698 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,699 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,699 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,700 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,700 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,700 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,701 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/Provider.hbm.xml
2012-04-30 13:37:57,701 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,701 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,705 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,705 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,706 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,706 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,707 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,707 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,708 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,708 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,708 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,709 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,709 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,709 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,710 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,710 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,711 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,711 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,711 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,712 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,712 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/RoutineCondition.hbm.xml
2012-04-30 13:37:57,713 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,713 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,717 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,717 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,718 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,719 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,719 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,720 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,720 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,721 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,721 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,721 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,722 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,722 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,723 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,723 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,723 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,724 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/NominatedIndividual.hbm.xml
2012-04-30 13:37:57,725 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,725 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,728 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,729 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,730 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,730 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,731 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,731 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,732 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,732 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,732 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,733 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,733 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,733 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,734 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,734 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,735 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,735 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,735 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,736 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,736 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,736 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,737 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,737 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,737 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,738 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,738 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,739 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,739 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,739 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,740 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,740 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,740 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,741 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,741 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,741 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,742 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,742 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,742 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/Outcome.hbm.xml
2012-04-30 13:37:57,743 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,743 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,745 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,746 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,746 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,747 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,748 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,749 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,749 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,750 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,750 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,750 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/ServiceType.hbm.xml
2012-04-30 13:37:57,751 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,751 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,754 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,755 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,755 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,756 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,756 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,757 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,757 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,757 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,758 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,758 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,758 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,759 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,759 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,759 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,760 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,760 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,761 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,761 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,761 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,762 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,762 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,762 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,763 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,763 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,764 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,764 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,764 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,765 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,765 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,766 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,767 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,767 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,767 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,768 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,768 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,769 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,769 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,769 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,770 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,770 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,770 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,771 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,771 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,771 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,772 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,772 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,772 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,773 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,783 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,783 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,784 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,784 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,785 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,785 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,785 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,786 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,786 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,786 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,787 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,787 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,787 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,788 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,788 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,789 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,789 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,789 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,790 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,790 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,790 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,791 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,791 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,791 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,792 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,792 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,793 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,793 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,793 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,794 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/Location.hbm.xml
2012-04-30 13:37:57,794 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,796 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,798 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,798 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,799 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,799 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,800 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,800 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,801 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,801 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,801 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,802 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/ServiceUserBand.hbm.xml
2012-04-30 13:37:57,802 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/hibernate-mapping.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,809 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/persistentclass.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,812 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - Key 'abstract' was not found on instance of org.hibernate.mapping.RootClass. Introspection information for the class is: {getIdentityTable=public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable(), customInsertCallable=java.beans.PropertyDescriptor@3e77bde6, isForceDiscriminator=public boolean org.hibernate.mapping.RootClass.isForceDiscriminator(), subclassTableClosureIterator=java.beans.PropertyDescriptor@b84595d2, isDiscriminatorValueNotNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull(), identityTable=java.beans.PropertyDescriptor@52ea0584, hashCode=public native int java.lang.Object.hashCode(), setLazy=public void org.hibernate.mapping.PersistentClass.setLazy(boolean), wait=freemarker.ext.beans.MethodMap@40be76c7, validate=public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException, identityTables=java.beans.PropertyDescriptor@e2146dbe, discriminatorInsertable=java.beans.PropertyDescriptor@cd7aa688, isDiscriminatorInsertable=public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable(), setForceDiscriminator=public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean), joinedSubclass=java.beans.PropertyDescriptor@1519df04, getIdentifierMapper=public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper(), mappedClass=java.beans.PropertyDescriptor@171b01f1, getReferencedProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException, getSubclassTableClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator(), tableClosureIterator=java.beans.PropertyDescriptor@7a814a65, setMutable=public void org.hibernate.mapping.RootClass.setMutable(boolean), customDeleteCallable=java.beans.PropertyDescriptor@4da1b0a8, superclass=java.beans.PropertyDescriptor@c149e6a8, joinClosureSpan=java.beans.PropertyDescriptor@e51b9499, temporaryIdTableDDL=java.beans.PropertyDescriptor@6fda7637, getDiscriminatorValue=public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue(), subclassClosureIterator=java.beans.PropertyDescriptor@f77fdf40, getDiscriminator=public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator(), getCustomSQLInsertCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle(), setOptimisticLockMode=public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int), subclassJoinClosureIterator=java.beans.PropertyDescriptor@9c2adb26, isMutable=public boolean org.hibernate.mapping.RootClass.isMutable(), setSelectBeforeUpdate=public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean), getMetaAttribute=public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String), setVersion=public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property), getOptimisticLockMode=public int org.hibernate.mapping.RootClass.getOptimisticLockMode(), getVersion=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion(), customSQLDelete=java.beans.PropertyDescriptor@a819d17d, getSubclassPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator(), getClass=public final native java.lang.Class java.lang.Object.getClass(), prepareTemporaryTables=public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect), isLazy=public boolean org.hibernate.mapping.PersistentClass.isLazy(), getCustomSQLUpdateCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle(), directSubclasses=java.beans.PropertyDescriptor@47fb6e56, getCustomSQLUpdate=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate(), propertyClosureIterator=java.beans.PropertyDescriptor@1690a38, isJoinedSubclass=public boolean org.hibernate.mapping.RootClass.isJoinedSubclass(), hasIdentifierProperty=public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty(), addProperty=public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property), subclassId=java.beans.PropertyDescriptor@7fa38544, lazy=java.beans.PropertyDescriptor@c37d94d3, setSubselectLoadableCollections=public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean), proxyInterface=java.beans.PropertyDescriptor@283c489f, identifierProperty=java.beans.PropertyDescriptor@84afd607, setMetaAttributes=public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map), getFilterMap=public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap(), hasEmbeddedIdentifier=public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier(), addSubclass=public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException, setLoaderName=public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String), cacheRegionName=java.beans.PropertyDescriptor@5ec1a423, nodeName=java.beans.PropertyDescriptor@7ba4f9fd, joinIterator=java.beans.PropertyDescriptor@ff982ac7, setExplicitPolymorphism=public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean), setBatchSize=public void org.hibernate.mapping.PersistentClass.setBatchSize(int), addTuplizer=public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String), key=java.beans.PropertyDescriptor@9baf5e34, isDiscriminatorValueNull=public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull(), getReferenceablePropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator(), setCustomSQLDelete=public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), setDiscriminatorValue=public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String), getRootClass=public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass(), addFilter=public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String), getLoaderName=public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName(), setEntityPersisterClass=public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class), getWhere=public java.lang.String org.hibernate.mapping.RootClass.getWhere(), setClassName=public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String), customSQLDeleteCheckStyle=java.beans.PropertyDescriptor@eee0bace, hasPojoRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation(), getProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException, createPrimaryKey=public void org.hibernate.mapping.PersistentClass.createPrimaryKey(), getIdentifier=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier(), identifier=java.beans.PropertyDescriptor@a4c207b8, setDynamicInsert=public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean), metaAttributes=java.beans.PropertyDescriptor@e466b8ec, setDiscriminatorInsertable=public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean), isExplicitPolymorphism=public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism(), className=java.beans.PropertyDescriptor@a8b1ba13, customSQLInsertCheckStyle=java.beans.PropertyDescriptor@33dbd08c, rootTable=java.beans.PropertyDescriptor@11225a6d, getIdentityTables=public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables(), getTuplizerMap=public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap(), setWhere=public void org.hibernate.mapping.RootClass.setWhere(java.lang.String), addJoin=public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join), getTemporaryIdTableDDL=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL(), java.lang.Object@3b926e90={public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String)=[Ljava.lang.Class;@60c9630a, public boolean java.lang.Object.equals(java.lang.Object)=[Ljava.lang.Class;@4585572a, public boolean org.hibernate.mapping.PersistentClass.hasNaturalId()=[Ljava.lang.Class;@351daa0e, public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode)=[Ljava.lang.Class;@2e879860, public int org.hibernate.mapping.PersistentClass.getSubclassSpan()=[Ljava.lang.Class;@4824de7d, public boolean org.hibernate.mapping.RootClass.hasIdentifierProperty()=[Ljava.lang.Class;@6c8b058b, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNotNull()=[Ljava.lang.Class;@1b192059, public org.hibernate.mapping.Table org.hibernate.mapping.PersistentClass.getIdentityTable()=[Ljava.lang.Class;@e9ac0f5, public void org.hibernate.mapping.PersistentClass.setLazy(boolean)=[Ljava.lang.Class;@51f21c50, public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String)=[Ljava.lang.Class;@6e20f237, public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation()=[Ljava.lang.Class;@34fe315d, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@1c5aebd9, public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable()=[Ljava.lang.Class;@1532021a, public boolean org.hibernate.mapping.RootClass.isJoinedSubclass()=[Ljava.lang.Class;@62803d5, public org.hibernate.mapping.Component org.hibernate.mapping.PersistentClass.getIdentifierMapper()=[Ljava.lang.Class;@2d13981b, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getReferencedProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@61672bbb, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getVersion()=[Ljava.lang.Class;@3c6833f2, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@5d2a73d9, public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean)=[Ljava.lang.Class;@e1bdb58, public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property)=[Ljava.lang.Class;@46dd75a4, public native int java.lang.Object.hashCode()=[Ljava.lang.Class;@75568654, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassTableClosureIterator()=[Ljava.lang.Class;@38d30fb, public java.lang.String org.hibernate.mapping.PersistentClass.getDiscriminatorValue()=[Ljava.lang.Class;@2a8ab08f, public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@774d921a, public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean)=[Ljava.lang.Class;@5b32627, public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator()=[Ljava.lang.Class;@348dcd5d, public boolean org.hibernate.mapping.RootClass.isMutable()=[Ljava.lang.Class;@49a5af9f, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLInsertCheckStyle()=[Ljava.lang.Class;@1cad157f, public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy()=[Ljava.lang.Class;@275e538e, public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component)=[Ljava.lang.Class;@21bfa3d3, public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan()=[Ljava.lang.Class;@2c9c82f4, public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface()=[Ljava.lang.Class;@5759780d, public void org.hibernate.mapping.RootClass.setVersion(org.hibernate.mapping.Property)=[Ljava.lang.Class;@32d8ca48, public void org.hibernate.mapping.PersistentClass.setOptimisticLockMode(int)=[Ljava.lang.Class;@36c8570c, public int org.hibernate.mapping.RootClass.getOptimisticLockMode()=[Ljava.lang.Class;@1acaf0ed, public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String)=[Ljava.lang.Class;@18f6559, public void org.hibernate.mapping.RootClass.setMutable(boolean)=[Ljava.lang.Class;@6d46b6db, public final native java.lang.Class java.lang.Object.getClass()=[Ljava.lang.Class;@3d8f1be9, public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable()=[Ljava.lang.Class;@7e717d91, public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator()=[Ljava.lang.Class;@4ceafb71, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName()=[Ljava.lang.Class;@5721df2a, public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty()=[Ljava.lang.Class;@70c26b16, public org.hibernate.mapping.MetaAttribute org.hibernate.mapping.PersistentClass.getMetaAttribute(java.lang.String)=[Ljava.lang.Class;@6c04ab2f, public void org.hibernate.mapping.PersistentClass.setSelectBeforeUpdate(boolean)=[Ljava.lang.Class;@2682d210, public org.hibernate.mapping.Value org.hibernate.mapping.RootClass.getDiscriminator()=[Ljava.lang.Class;@56ad2c30, public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName()=[Ljava.lang.Class;@3302fc5, public boolean org.hibernate.mapping.RootClass.isVersioned()=[Ljava.lang.Class;@50903025, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator()=[Ljava.lang.Class;@2a48f675, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle()=[Ljava.lang.Class;@1c2c9103, public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper()=[Ljava.lang.Class;@31e46a68, public boolean org.hibernate.mapping.RootClass.isDiscriminatorInsertable()=[Ljava.lang.Class;@b05eb6f, public void org.hibernate.mapping.PersistentClass.prepareTemporaryTables(org.hibernate.engine.Mapping,org.hibernate.dialect.Dialect)=[Ljava.lang.Class;@31a3ca10, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassPropertyClosureIterator()=[Ljava.lang.Class;@7826f9e5, public void org.hibernate.mapping.RootClass.setForceDiscriminator(boolean)=[Ljava.lang.Class;@46e06703, public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLUpdateCheckStyle()=[Ljava.lang.Class;@368b1a4f, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLUpdate()=[Ljava.lang.Class;@666c5482, public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@52205756, public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate()=[Ljava.lang.Class;@4945f939, public boolean org.hibernate.mapping.PersistentClass.isLazy()=[Ljava.lang.Class;@10ed32c4, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey()=[Ljava.lang.Class;@449fea8a, public org.hibernate.mapping.RootClass()=[Ljava.lang.Class;@5edf2d38, public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName()=[Ljava.lang.Class;@e11e831, public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor)=[Ljava.lang.Class;@39a2f02e, public boolean org.hibernate.mapping.RootClass.isForceDiscriminator()=[Ljava.lang.Class;@78467991, public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String)=[Ljava.lang.Class;@5ad75c47, public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator()=[Ljava.lang.Class;@70eb67e8, public void org.hibernate.mapping.PersistentClass.setSubselectLoadableCollections(boolean)=[Ljava.lang.Class;@6ef2ea42, public void org.hibernate.mapping.PersistentClass.addProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@df1cbf6, public void org.hibernate.mapping.RootClass.validate(org.hibernate.engine.Mapping) throws org.hibernate.MappingException=[Ljava.lang.Class;@7d858aa0, public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException=[Ljava.lang.Class;@4a504ec1, public void org.hibernate.mapping.PersistentClass.setLoaderName(java.lang.String)=[Ljava.lang.Class;@5e628704, public void org.hibernate.mapping.PersistentClass.setMetaAttributes(java.util.Map)=[Ljava.lang.Class;@168e4805, public java.util.Map org.hibernate.mapping.PersistentClass.getFilterMap()=[Ljava.lang.Class;@571a4bd4, public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate()=[Ljava.lang.Class;@7f6877f8, public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable()=[Ljava.lang.Class;@239c7c21, public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables()=[Ljava.lang.Class;@76996cca, public void org.hibernate.mapping.RootClass.setWhere(java.lang.String)=[Ljava.lang.Class;@52b57e9a, public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract()=[Ljava.lang.Class;@98adae2, public void org.hibernate.mapping.PersistentClass.setBatchSize(int)=[Ljava.lang.Class;@7b283052, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable()=[Ljava.lang.Class;@b7c96a9, public void org.hibernate.mapping.PersistentClass.addTuplizer(org.hibernate.EntityMode,java.lang.String)=[Ljava.lang.Class;@20873723, public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value)=[Ljava.lang.Class;@d34eb84, public boolean org.hibernate.mapping.PersistentClass.isDiscriminatorValueNull()=[Ljava.lang.Class;@d522de2, public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass()=[Ljava.lang.Class;@e425743, public boolean org.hibernate.mapping.RootClass.isPolymorphic()=[Ljava.lang.Class;@256ef705, public void org.hibernate.mapping.PersistentClass.addFilter(java.lang.String,java.lang.String)=[Ljava.lang.Class;@181b7c76, public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert()=[Ljava.lang.Class;@34883357, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator()=[Ljava.lang.Class;@59e2afb2, public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName()=[Ljava.lang.Class;@317cfd38, public java.util.Iterator org.hibernate.mapping.PersistentClass.getReferenceablePropertyIterator()=[Ljava.lang.Class;@4d480ea, public void org.hibernate.mapping.PersistentClass.setCustomSQLDelete(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@1b5b8520, public void org.hibernate.mapping.PersistentClass.setDiscriminatorValue(java.lang.String)=[Ljava.lang.Class;@158105e8, public void org.hibernate.mapping.PersistentClass.setClassName(java.lang.String)=[Ljava.lang.Class;@49aacd5f, public boolean org.hibernate.mapping.PersistentClass.hasSubclasses()=[Ljava.lang.Class;@6c913dc1, public java.util.Set org.hibernate.mapping.RootClass.getIdentityTables()=[Ljava.lang.Class;@336d8196, public java.lang.String org.hibernate.mapping.PersistentClass.getLoaderName()=[Ljava.lang.Class;@5a56b93a, public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan()=[Ljava.lang.Class;@739abd2b, public void org.hibernate.mapping.RootClass.setPolymorphic(boolean)=[Ljava.lang.Class;@33f98d58, public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator()=[Ljava.lang.Class;@44aea710, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete()=[Ljava.lang.Class;@265a2eaa, public int org.hibernate.mapping.RootClass.getSubclassId()=[Ljava.lang.Class;@6aadae91, public void org.hibernate.mapping.PersistentClass.createPrimaryKey()=[Ljava.lang.Class;@309fe84e, public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getProperty(java.lang.String) throws org.hibernate.MappingException=[Ljava.lang.Class;@524c71d2, public boolean org.hibernate.mapping.PersistentClass.hasPojoRepresentation()=[Ljava.lang.Class;@18c4bc34, public void org.hibernate.mapping.RootClass.setDiscriminatorInsertable(boolean)=[Ljava.lang.Class;@1c2006a0, public void org.hibernate.mapping.PersistentClass.setDynamicInsert(boolean)=[Ljava.lang.Class;@7a9300cc, public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes()=[Ljava.lang.Class;@49198ff2, public final native void java.lang.Object.notifyAll()=[Ljava.lang.Class;@2d397e5c, public java.lang.String org.hibernate.mapping.PersistentClass.toString()=[Ljava.lang.Class;@1996e136, public boolean org.hibernate.mapping.RootClass.isExplicitPolymorphism()=[Ljava.lang.Class;@9bad5a, public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses()=[Ljava.lang.Class;@6c91f005, public boolean org.hibernate.mapping.RootClass.isInherited()=[Ljava.lang.Class;@61250ff2, public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable()=[Ljava.lang.Class;@483a0ab1, public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getIdentifier()=[Ljava.lang.Class;@5a940f82, public java.lang.String org.hibernate.mapping.PersistentClass.getClassName()=[Ljava.lang.Class;@2e864e43, public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue)=[Ljava.lang.Class;@737c2891, public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String)=[Ljava.lang.Class;@5c4b82d2, public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass()=[Ljava.lang.Class;@6179d854, public org.hibernate.mapping.RootClass org.hibernate.mapping.RootClass.getRootClass()=[Ljava.lang.Class;@669a4cb, public void org.hibernate.mapping.RootClass.setEntityPersisterClass(java.lang.Class)=[Ljava.lang.Class;@1c20eb7, public java.util.Map org.hibernate.mapping.PersistentClass.getTuplizerMap()=[Ljava.lang.Class;@6b541147, public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String)=[Ljava.lang.Class;@5c3a835d, public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table)=[Ljava.lang.Class;@5867df9, public java.lang.String org.hibernate.mapping.RootClass.getWhere()=[Ljava.lang.Class;@40b86944, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator()=[Ljava.lang.Class;@b07108e, public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections()=[Ljava.lang.Class;@7ccfe049, public void org.hibernate.mapping.PersistentClass.addJoin(org.hibernate.mapping.Join)=[Ljava.lang.Class;@338e18a3, public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean)=[Ljava.lang.Class;@35f38fc6, public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableDDL()=[Ljava.lang.Class;@9642bd6, public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName()=[Ljava.lang.Class;@f79f36b, public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert()=[Ljava.lang.Class;@f5bfdbd, public void org.hibernate.mapping.RootClass.setExplicitPolymorphism(boolean)=[Ljava.lang.Class;@606f8b2b, public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator()=[Ljava.lang.Class;@3b19e583, public int org.hibernate.mapping.PersistentClass.getBatchSize()=[Ljava.lang.Class;@212b19c5, public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator()=[Ljava.lang.Class;@14a8e586, public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable()=[Ljava.lang.Class;@5c74cb02, public final native void java.lang.Object.notify()=[Ljava.lang.Class;@77bc1fb9, public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property)=[Ljava.lang.Class;@5fc6e818, public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator()=[Ljava.lang.Class;@7bafb0c7, public boolean org.hibernate.mapping.RootClass.hasEmbeddedIdentifier()=[Ljava.lang.Class;@4b7f1841, public void org.hibernate.mapping.RootClass.addSubclass(org.hibernate.mapping.Subclass) throws org.hibernate.MappingException=[Ljava.lang.Class;@5117a20, public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean)=[Ljava.lang.Class;@3e68cd79, public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)=[Ljava.lang.Class;@5289e2f1}, setDiscriminator=public void org.hibernate.mapping.RootClass.setDiscriminator(org.hibernate.mapping.Value), getSubclassJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassJoinClosureIterator(), mutable=java.beans.PropertyDescriptor@f976b263, subclassSpan=java.beans.PropertyDescriptor@a4de5690, propertyIterator=java.beans.PropertyDescriptor@3881f742, referenceablePropertyIterator=java.beans.PropertyDescriptor@cf64618f, getKey=public org.hibernate.mapping.KeyValue org.hibernate.mapping.RootClass.getKey(), setProxyInterfaceName=public void org.hibernate.mapping.PersistentClass.setProxyInterfaceName(java.lang.String), hasNaturalId=public boolean org.hibernate.mapping.PersistentClass.hasNaturalId(), getTuplizerImplClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getTuplizerImplClassName(org.hibernate.EntityMode), accept=public java.lang.Object org.hibernate.mapping.RootClass.accept(org.hibernate.mapping.PersistentClassVisitor), getSubclassSpan=public int org.hibernate.mapping.PersistentClass.getSubclassSpan(), setCacheRegionName=public void org.hibernate.mapping.RootClass.setCacheRegionName(java.lang.String), setEntityName=public void org.hibernate.mapping.PersistentClass.setEntityName(java.lang.String), joinClosureIterator=java.beans.PropertyDescriptor@458b633e, hasDom4jRepresentation=public boolean org.hibernate.mapping.PersistentClass.hasDom4jRepresentation(), isClassOrSuperclassTable=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassTable(org.hibernate.mapping.Table), entityPersisterClass=java.beans.PropertyDescriptor@32cdb15f, loaderName=java.beans.PropertyDescriptor@e845297e, subclassPropertyClosureIterator=java.beans.PropertyDescriptor@b76187cb, getRecursiveProperty=public org.hibernate.mapping.Property org.hibernate.mapping.PersistentClass.getRecursiveProperty(java.lang.String) throws org.hibernate.MappingException, customSQLUpdate=java.beans.PropertyDescriptor@cc629acb, setDynamicUpdate=public void org.hibernate.mapping.PersistentClass.setDynamicUpdate(boolean), isVersioned=public boolean org.hibernate.mapping.RootClass.isVersioned(), equals=public boolean java.lang.Object.equals(java.lang.Object), table=java.beans.PropertyDescriptor@a92d1bb, getJoinNumber=public int org.hibernate.mapping.PersistentClass.getJoinNumber(org.hibernate.mapping.Property), versioned=java.beans.PropertyDescriptor@1df2d23e, unjoinedPropertyIterator=java.beans.PropertyDescriptor@f47a9254, getPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getPropertyIterator(), setCacheConcurrencyStrategy=public void org.hibernate.mapping.RootClass.setCacheConcurrencyStrategy(java.lang.String), setCustomSQLInsert=public void org.hibernate.mapping.PersistentClass.setCustomSQLInsert(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle), identifierMapper=java.beans.PropertyDescriptor@75d2ece3, filterMap=java.beans.PropertyDescriptor@4d1d1091, getPropertyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getPropertyClosureIterator(), getPropertyClosureSpan=public int org.hibernate.mapping.PersistentClass.getPropertyClosureSpan(), setIdentifierMapper=public void org.hibernate.mapping.PersistentClass.setIdentifierMapper(org.hibernate.mapping.Component), getProxyInterface=public java.lang.Class org.hibernate.mapping.PersistentClass.getProxyInterface(), getIdentifierProperty=public org.hibernate.mapping.Property org.hibernate.mapping.RootClass.getIdentifierProperty(), isCustomUpdateCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomUpdateCallable(), setLazyPropertiesCacheable=public void org.hibernate.mapping.RootClass.setLazyPropertiesCacheable(boolean), proxyInterfaceName=java.beans.PropertyDescriptor@2895c2d6, discriminatorValueNotNull=java.beans.PropertyDescriptor@bdd27bd9, getTemporaryIdTableName=public java.lang.String org.hibernate.mapping.PersistentClass.getTemporaryIdTableName(), getCacheConcurrencyStrategy=public java.lang.String org.hibernate.mapping.RootClass.getCacheConcurrencyStrategy(), version=java.beans.PropertyDescriptor@4fd39f39, synchronizedTables=java.beans.PropertyDescriptor@606c7460, getJoinIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinIterator(), getProxyInterfaceName=public java.lang.String org.hibernate.mapping.PersistentClass.getProxyInterfaceName(), tuplizerMap=java.beans.PropertyDescriptor@d7fe136e, lazyPropertiesCacheable=java.beans.PropertyDescriptor@319115d6, keyClosureIterator=java.beans.PropertyDescriptor@36670732, getCustomSQLDeleteCheckStyle=public org.hibernate.engine.ExecuteUpdateResultCheckStyle org.hibernate.mapping.PersistentClass.getCustomSQLDeleteCheckStyle(), hasIdentifierMapper=public boolean org.hibernate.mapping.PersistentClass.hasIdentifierMapper(), isLazyPropertiesCacheable=public boolean org.hibernate.mapping.RootClass.isLazyPropertiesCacheable(), isClassOrSuperclassJoin=public boolean org.hibernate.mapping.PersistentClass.isClassOrSuperclassJoin(org.hibernate.mapping.Join), useDynamicUpdate=public boolean org.hibernate.mapping.PersistentClass.useDynamicUpdate(), getNodeName=public java.lang.String org.hibernate.mapping.PersistentClass.getNodeName(), explicitPolymorphism=java.beans.PropertyDescriptor@e28ab3b4, temporaryIdTableName=java.beans.PropertyDescriptor@7555d56a, getUnjoinedPropertyIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getUnjoinedPropertyIterator(), setIdentifierProperty=public void org.hibernate.mapping.RootClass.setIdentifierProperty(org.hibernate.mapping.Property), getTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getTable(), setEmbeddedIdentifier=public void org.hibernate.mapping.RootClass.setEmbeddedIdentifier(boolean), getMappedClass=public java.lang.Class org.hibernate.mapping.PersistentClass.getMappedClass() throws org.hibernate.MappingException, cacheConcurrencyStrategy=java.beans.PropertyDescriptor@506942ba, customSQLInsert=java.beans.PropertyDescriptor@e0b1d63b, getTableClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getTableClosureIterator(), customUpdateCallable=java.beans.PropertyDescriptor@90dc7a76, where=java.beans.PropertyDescriptor@94eb32b1, isAbstract=public java.lang.Boolean org.hibernate.mapping.PersistentClass.isAbstract(), hasSelectBeforeUpdate=public boolean org.hibernate.mapping.PersistentClass.hasSelectBeforeUpdate(), isCustomInsertCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomInsertCallable(), polymorphic=java.beans.PropertyDescriptor@a068bed3, notifyAll=public final native void java.lang.Object.notifyAll(), useDynamicInsert=public boolean org.hibernate.mapping.PersistentClass.useDynamicInsert(), getSubclassClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassClosureIterator(), getSuperclass=public org.hibernate.mapping.PersistentClass org.hibernate.mapping.RootClass.getSuperclass(), rootClass=java.beans.PropertyDescriptor@db6f2a55, hasSubclasses=public boolean org.hibernate.mapping.PersistentClass.hasSubclasses(), batchSize=java.beans.PropertyDescriptor@7e06f994, class=java.beans.PropertyDescriptor@fc5e09ec, getJoinClosureSpan=public int org.hibernate.mapping.PersistentClass.getJoinClosureSpan(), discriminatorValue=java.beans.PropertyDescriptor@f5a4905, setTable=public void org.hibernate.mapping.RootClass.setTable(org.hibernate.mapping.Table), optimisticLockMode=java.beans.PropertyDescriptor@5e40885f, customSQLUpdateCheckStyle=java.beans.PropertyDescriptor@c11dd91c, getCustomSQLDelete=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLDelete(), discriminator=java.beans.PropertyDescriptor@14f58107, toString=public java.lang.String org.hibernate.mapping.PersistentClass.toString(), isInherited=public boolean org.hibernate.mapping.RootClass.isInherited(), setIdentifier=public void org.hibernate.mapping.RootClass.setIdentifier(org.hibernate.mapping.KeyValue), getMetaAttributes=public java.util.Map org.hibernate.mapping.PersistentClass.getMetaAttributes(), getSubclassId=public int org.hibernate.mapping.RootClass.getSubclassId(), getDirectSubclasses=public java.util.Iterator org.hibernate.mapping.PersistentClass.getDirectSubclasses(), discriminatorValueNull=java.beans.PropertyDescriptor@a4771ff0, getClassName=public java.lang.String org.hibernate.mapping.PersistentClass.getClassName(), isCustomDeleteCallable=public boolean org.hibernate.mapping.PersistentClass.isCustomDeleteCallable(), propertyClosureSpan=java.beans.PropertyDescriptor@5e6e3aee, isPolymorphic=public boolean org.hibernate.mapping.RootClass.isPolymorphic(), getCacheRegionName=public java.lang.String org.hibernate.mapping.RootClass.getCacheRegionName(), addSynchronizedTable=public void org.hibernate.mapping.PersistentClass.addSynchronizedTable(java.lang.String), notify=public final native void java.lang.Object.notify(), setNodeName=public void org.hibernate.mapping.PersistentClass.setNodeName(java.lang.String), getKeyClosureIterator=public java.util.Iterator org.hibernate.mapping.RootClass.getKeyClosureIterator(), setPolymorphic=public void org.hibernate.mapping.RootClass.setPolymorphic(boolean), java.lang.Object@a98ce7e=public org.hibernate.mapping.RootClass(), getEntityName=public java.lang.String org.hibernate.mapping.PersistentClass.getEntityName(), getSynchronizedTables=public java.util.Set org.hibernate.mapping.RootClass.getSynchronizedTables(), getCustomSQLInsert=public java.lang.String org.hibernate.mapping.PersistentClass.getCustomSQLInsert(), getSubclassIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getSubclassIterator(), hasSubselectLoadableCollections=public boolean org.hibernate.mapping.PersistentClass.hasSubselectLoadableCollections(), setAbstract=public void org.hibernate.mapping.PersistentClass.setAbstract(java.lang.Boolean), subclassIterator=java.beans.PropertyDescriptor@5bb67905, getRootTable=public org.hibernate.mapping.Table org.hibernate.mapping.RootClass.getRootTable(), inherited=java.beans.PropertyDescriptor@3a38d487, getJoinClosureIterator=public java.util.Iterator org.hibernate.mapping.PersistentClass.getJoinClosureIterator(), getBatchSize=public int org.hibernate.mapping.PersistentClass.getBatchSize(), getEntityPersisterClass=public java.lang.Class org.hibernate.mapping.RootClass.getEntityPersisterClass(), entityName=java.beans.PropertyDescriptor@351391ce, forceDiscriminator=java.beans.PropertyDescriptor@775fdc92, setCustomSQLUpdate=public void org.hibernate.mapping.PersistentClass.setCustomSQLUpdate(java.lang.String,boolean,org.hibernate.engine.ExecuteUpdateResultCheckStyle)}
2012-04-30 13:37:57,812 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,813 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/id.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,813 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,814 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/pkcolumn.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,814 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,814 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,815 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,815 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,816 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,816 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,816 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/property.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,817 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/meta.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,817 [main] DEBUG freemarker.log.Log4JLoggerFactory$Log4JLogger.debug(Log4JLoggerFactory.java:81) - hbm/column.hbm.ftl[en_GB,UTF-8,parsed] cached copy not yet stale; using cached.
2012-04-30 13:37:57,817 [main] DEBUG org.hibernate.tool.hbm2x.TemplateProducer.produce(TemplateProducer.java:40) - Writing hbm/hibernate-mapping.hbm.ftl to /home/appadmin/java/hib/output/org/cqc/Partner.hbm.xml
2012-04-30 13:37:57,880 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/RegisteredManager.hbm.xml
2012-04-30 13:37:57,921 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:57,922 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/Chapter.hbm.xml
2012-04-30 13:37:57,932 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:57,932 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/JudgementMethod.hbm.xml
2012-04-30 13:37:57,944 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:57,944 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/ComplianceCondition.hbm.xml
2012-04-30 13:37:57,962 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:57,962 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/RegulatedActivity.hbm.xml
2012-04-30 13:37:57,975 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:57,975 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/Provider.hbm.xml
2012-04-30 13:37:58,001 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,002 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/RoutineCondition.hbm.xml
2012-04-30 13:37:58,011 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,012 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/NominatedIndividual.hbm.xml
2012-04-30 13:37:58,018 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,018 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/Outcome.hbm.xml
2012-04-30 13:37:58,028 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,029 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/ServiceType.hbm.xml
2012-04-30 13:37:58,034 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,034 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/Location.hbm.xml
2012-04-30 13:37:58,050 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,050 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/ServiceUserBand.hbm.xml
2012-04-30 13:37:58,054 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,054 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/org/cqc/Partner.hbm.xml
2012-04-30 13:37:58,058 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
2012-04-30 13:37:58,059 [main] DEBUG org.hibernate.tool.hbm2x.AbstractExporter.setupTemplates(AbstractExporter.java:138) - org.hibernate.tool.hbm2x.HibernateConfigurationExporter outputdir:/home/appadmin/java/hib/output path: [/home/appadmin/java/hib/templates]
2012-04-30 13:37:58,064 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:88) - XMLPrettyPrinting /home/appadmin/java/hib/output/hibernate.cfg.xml
2012-04-30 13:37:58,069 [main] DEBUG org.hibernate.tool.hbm2x.XMLPrettyPrinter.prettyPrintFile(XMLPrettyPrinter.java:138) - XMLPrettyPrinting completed
