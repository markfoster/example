package org.cqc;

import org.junit.Assert;
import org.junit.Test;


import org.cqc.etl.factories.pptest2.*;
import org.cqc.etl.model.obj.pptest2.*;
import org.cqc.etl.services.data.DataLayerPptest2;
import org.cqc.etl.services.data.DataLayerPptest2Impl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernatePptest2DaoFactory.getServiceUserBandDao().getQuery("delete from ServiceUserBand").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getServiceTypeDao().getQuery("delete from ServiceType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getReportSummaryDao().getQuery("delete from ReportSummary").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getRegisteredManagerConditionDao().getQuery("delete from RegisteredManagerCondition").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getRegisteredManagerDao().getQuery("delete from RegisteredManager").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getProviderRegulatedActivityDao().getQuery("delete from ProviderRegulatedActivity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getProviderConditionDao().getQuery("delete from ProviderCondition").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getProviderDao().getQuery("delete from Provider").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getPartnerDao().getQuery("delete from Partner").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getOutcomeDao().getQuery("delete from Outcome").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getNominatedIndividualDao().getQuery("delete from NominatedIndividual").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getLocationRegulatedActivityDao().getQuery("delete from LocationRegulatedActivity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getLocationConditionDao().getQuery("delete from LocationCondition").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getLocationDao().getQuery("delete from Location").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getChapterDao().getQuery("delete from Chapter").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernatePptest2DaoFactory.getServiceUserBandDao().getQuery("delete from ServiceUserBand").executeUpdate();
		HibernatePptest2DaoFactory.getServiceTypeDao().getQuery("delete from ServiceType").executeUpdate();
		HibernatePptest2DaoFactory.getReportSummaryDao().getQuery("delete from ReportSummary").executeUpdate();
		HibernatePptest2DaoFactory.getRegisteredManagerConditionDao().getQuery("delete from RegisteredManagerCondition").executeUpdate();
		HibernatePptest2DaoFactory.getRegisteredManagerDao().getQuery("delete from RegisteredManager").executeUpdate();
		HibernatePptest2DaoFactory.getProviderRegulatedActivityDao().getQuery("delete from ProviderRegulatedActivity").executeUpdate();
		HibernatePptest2DaoFactory.getProviderConditionDao().getQuery("delete from ProviderCondition").executeUpdate();
		HibernatePptest2DaoFactory.getProviderDao().getQuery("delete from Provider").executeUpdate();
		HibernatePptest2DaoFactory.getPartnerDao().getQuery("delete from Partner").executeUpdate();
		HibernatePptest2DaoFactory.getOutcomeDao().getQuery("delete from Outcome").executeUpdate();
		HibernatePptest2DaoFactory.getNominatedIndividualDao().getQuery("delete from NominatedIndividual").executeUpdate();
		HibernatePptest2DaoFactory.getLocationRegulatedActivityDao().getQuery("delete from LocationRegulatedActivity").executeUpdate();
		HibernatePptest2DaoFactory.getLocationConditionDao().getQuery("delete from LocationCondition").executeUpdate();
		HibernatePptest2DaoFactory.getLocationDao().getQuery("delete from Location").executeUpdate();
		HibernatePptest2DaoFactory.getChapterDao().getQuery("delete from Chapter").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: pptest2.chapter.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testChapter() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		Chapter chapter = Pptest2DataPoolFactory.getChapter();
		dataLayerPptest2.saveOrUpdate(chapter);

		ChapterPK chapterId = chapter.getId();
		Chapter copy = chapter.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(chapter); 		 

		chapter = dataLayerPptest2.getChapter(chapterId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), chapter.getActionCode());
		Assert.assertEquals(copy.getId(), chapter.getId());
		Assert.assertEquals(copy.getScore(), chapter.getScore());
		// tests for coverage completeness
		Assert.assertFalse(chapter.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(chapter.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.location.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testLocation() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		Location location = Pptest2DataPoolFactory.getLocation();
		dataLayerPptest2.saveOrUpdate(location);

		LocationPK locationId = location.getId();
		Location copy = location.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(location); 		 

		location = dataLayerPptest2.getLocation(locationId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAboutLocation(), location.getAboutLocation());
		Assert.assertEquals(copy.getActionCode(), location.getActionCode());
		Assert.assertEquals(copy.getAddress1(), location.getAddress1());
		Assert.assertEquals(copy.getAddress2(), location.getAddress2());
		Assert.assertEquals(copy.getAlsoKnownAs(), location.getAlsoKnownAs());
		Assert.assertEquals(copy.getCounty(), location.getCounty());
		Assert.assertEquals(copy.getEmail(), location.getEmail());
		Assert.assertEquals(copy.getFax(), location.getFax());
		Assert.assertEquals(copy.getId(), location.getId());
		Assert.assertEquals(copy.getInProcess(), location.getInProcess());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, location.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getLatitude(), location.getLatitude());
		Assert.assertEquals(copy.getLongitude(), location.getLongitude());
		Assert.assertEquals(copy.getName(), location.getName());
		Assert.assertEquals(copy.getPostcode(), location.getPostcode());
		Assert.assertEquals(copy.getSubtype(), location.getSubtype());
		Assert.assertEquals(copy.getTelephone(), location.getTelephone());
		Assert.assertEquals(copy.getTowncity(), location.getTowncity());
		Assert.assertEquals(copy.getType(), location.getType());
		Assert.assertEquals(copy.getUnderReviewText(), location.getUnderReviewText());
		Assert.assertEquals(copy.getUserExperience(), location.getUserExperience());
		Assert.assertEquals(copy.getWebsite(), location.getWebsite());
		// tests for coverage completeness
		Assert.assertFalse(location.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(location.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.location_condition.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testLocationCondition() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		LocationCondition locationCondition = Pptest2DataPoolFactory.getLocationCondition();
		dataLayerPptest2.saveOrUpdate(locationCondition);

		LocationConditionPK locationConditionId = locationCondition.getId();
		LocationCondition copy = locationCondition.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(locationCondition); 		 

		locationCondition = dataLayerPptest2.getLocationCondition(locationConditionId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), locationCondition.getActionCode());
		Assert.assertEquals(copy.getId(), locationCondition.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, locationCondition.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getReason(), locationCondition.getReason());
		Assert.assertEquals(copy.getRegulatedActivityNumber(), locationCondition.getRegulatedActivityNumber());
		Assert.assertEquals(copy.getText(), locationCondition.getText());
		Assert.assertEquals(copy.getType(), locationCondition.getType());
		// tests for coverage completeness
		Assert.assertFalse(locationCondition.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(locationCondition.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.location_regulated_activity.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testLocationRegulatedActivity() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		LocationRegulatedActivity locationRegulatedActivity = Pptest2DataPoolFactory.getLocationRegulatedActivity();
		dataLayerPptest2.saveOrUpdate(locationRegulatedActivity);

		LocationRegulatedActivityPK locationRegulatedActivityId = locationRegulatedActivity.getId();
		LocationRegulatedActivity copy = locationRegulatedActivity.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(locationRegulatedActivity); 		 

		locationRegulatedActivity = dataLayerPptest2.getLocationRegulatedActivity(locationRegulatedActivityId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), locationRegulatedActivity.getActionCode());
		Assert.assertEquals(copy.getId(), locationRegulatedActivity.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, locationRegulatedActivity.getLastUpdated().getTime() / 1000);
		// tests for coverage completeness
		Assert.assertFalse(locationRegulatedActivity.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(locationRegulatedActivity.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.nominated_individual.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testNominatedIndividual() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		NominatedIndividual nominatedIndividual = Pptest2DataPoolFactory.getNominatedIndividual();
		dataLayerPptest2.saveOrUpdate(nominatedIndividual);

		NominatedIndividualPK nominatedIndividualId = nominatedIndividual.getId();
		NominatedIndividual copy = nominatedIndividual.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(nominatedIndividual); 		 

		nominatedIndividual = dataLayerPptest2.getNominatedIndividual(nominatedIndividualId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), nominatedIndividual.getActionCode());
		Assert.assertEquals(copy.getId(), nominatedIndividual.getId());
		Assert.assertEquals(copy.getName(), nominatedIndividual.getName());
		// tests for coverage completeness
		Assert.assertFalse(nominatedIndividual.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(nominatedIndividual.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.outcome.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testOutcome() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		Outcome outcome = Pptest2DataPoolFactory.getOutcome();
		dataLayerPptest2.saveOrUpdate(outcome);

		OutcomePK outcomeId = outcome.getId();
		Outcome copy = outcome.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(outcome); 		 

		outcome = dataLayerPptest2.getOutcome(outcomeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), outcome.getActionCode());
		Assert.assertEquals(copy.getId(), outcome.getId());
		Assert.assertEquals(copy.getJudgementDate(), outcome.getJudgementDate());
		Assert.assertEquals(copy.getJudgementId(), outcome.getJudgementId());
		Assert.assertEquals(copy.getJudgementOtherEvidence(), outcome.getJudgementOtherEvidence());
		Assert.assertEquals(copy.getJudgementReason(), outcome.getJudgementReason());
		Assert.assertEquals(copy.getJudgementScoreId(), outcome.getJudgementScoreId());
		Assert.assertEquals(copy.getJudgementSummary(), outcome.getJudgementSummary());
		Assert.assertEquals(copy.getJudgementUserExperience(), outcome.getJudgementUserExperience());
		Assert.assertEquals(copy.getOutcomeStatementId(), outcome.getOutcomeStatementId());
		// tests for coverage completeness
		Assert.assertFalse(outcome.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(outcome.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.partner.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testPartner() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		Partner partner = Pptest2DataPoolFactory.getPartner();
		dataLayerPptest2.saveOrUpdate(partner);

		PartnerPK partnerId = partner.getId();
		Partner copy = partner.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(partner); 		 

		partner = dataLayerPptest2.getPartner(partnerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), partner.getActionCode());
		Assert.assertEquals(copy.getId(), partner.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, partner.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getName(), partner.getName());
		// tests for coverage completeness
		Assert.assertFalse(partner.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(partner.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.provider.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProvider() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		Provider provider = Pptest2DataPoolFactory.getProvider();
		dataLayerPptest2.saveOrUpdate(provider);

		String providerId = provider.getId();
		Provider copy = provider.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(provider); 		 

		provider = dataLayerPptest2.getProvider(providerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), provider.getActionCode());
		Assert.assertEquals(copy.getAddress1(), provider.getAddress1());
		Assert.assertEquals(copy.getAddress2(), provider.getAddress2());
		Assert.assertEquals(copy.getAlsoKnownAs(), provider.getAlsoKnownAs());
		Assert.assertEquals(copy.getCounty(), provider.getCounty());
		Assert.assertEquals(copy.getEmail(), provider.getEmail());
		Assert.assertEquals(copy.getFax(), provider.getFax());
		Assert.assertEquals(copy.getId(), provider.getId());
		Assert.assertEquals(copy.getInProcess(), provider.getInProcess());
		Assert.assertEquals(copy.getIsPartnership(), provider.getIsPartnership());
		Assert.assertEquals(copy.getLatitude(), provider.getLatitude());
		Assert.assertEquals(copy.getLongitude(), provider.getLongitude());
		Assert.assertEquals(copy.getName(), provider.getName());
		Assert.assertEquals(copy.getPostcode(), provider.getPostcode());
		Assert.assertEquals(copy.getRegion(), provider.getRegion());
		Assert.assertEquals(copy.getSegmentation(), provider.getSegmentation());
		Assert.assertEquals(copy.getSubtype(), provider.getSubtype());
		Assert.assertEquals(copy.getTelephone(), provider.getTelephone());
		Assert.assertEquals(copy.getTowncity(), provider.getTowncity());
		Assert.assertEquals(copy.getType(), provider.getType());
		Assert.assertEquals(copy.getUnderReviewText(), provider.getUnderReviewText());
		Assert.assertEquals(copy.getUserExperience(), provider.getUserExperience());
		Assert.assertEquals(copy.getWebsite(), provider.getWebsite());
		// tests for coverage completeness
		Assert.assertFalse(provider.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(provider.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.provider_condition.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProviderCondition() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		ProviderCondition providerCondition = Pptest2DataPoolFactory.getProviderCondition();
		dataLayerPptest2.saveOrUpdate(providerCondition);

		ProviderConditionPK providerConditionId = providerCondition.getId();
		ProviderCondition copy = providerCondition.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(providerCondition); 		 

		providerCondition = dataLayerPptest2.getProviderCondition(providerConditionId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), providerCondition.getActionCode());
		Assert.assertEquals(copy.getId(), providerCondition.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, providerCondition.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getReason(), providerCondition.getReason());
		Assert.assertEquals(copy.getRegulatedActivityNumber(), providerCondition.getRegulatedActivityNumber());
		Assert.assertEquals(copy.getText(), providerCondition.getText());
		// tests for coverage completeness
		Assert.assertFalse(providerCondition.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(providerCondition.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.provider_regulated_activity.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testProviderRegulatedActivity() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		ProviderRegulatedActivity providerRegulatedActivity = Pptest2DataPoolFactory.getProviderRegulatedActivity();
		dataLayerPptest2.saveOrUpdate(providerRegulatedActivity);

		ProviderRegulatedActivityPK providerRegulatedActivityId = providerRegulatedActivity.getId();
		ProviderRegulatedActivity copy = providerRegulatedActivity.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(providerRegulatedActivity); 		 

		providerRegulatedActivity = dataLayerPptest2.getProviderRegulatedActivity(providerRegulatedActivityId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), providerRegulatedActivity.getActionCode());
		Assert.assertEquals(copy.getId(), providerRegulatedActivity.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, providerRegulatedActivity.getLastUpdated().getTime() / 1000);
		// tests for coverage completeness
		Assert.assertFalse(providerRegulatedActivity.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(providerRegulatedActivity.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.registered_manager.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testRegisteredManager() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		RegisteredManager registeredManager = Pptest2DataPoolFactory.getRegisteredManager();
		dataLayerPptest2.saveOrUpdate(registeredManager);

		RegisteredManagerPK registeredManagerId = registeredManager.getId();
		RegisteredManager copy = registeredManager.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(registeredManager); 		 

		registeredManager = dataLayerPptest2.getRegisteredManager(registeredManagerId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), registeredManager.getActionCode());
		Assert.assertEquals(copy.getId(), registeredManager.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, registeredManager.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getManagerCondition(), registeredManager.getManagerCondition());
		Assert.assertEquals(copy.getName(), registeredManager.getName());
		Assert.assertEquals(copy.getRegisteredManagerId(), registeredManager.getRegisteredManagerId());
		Assert.assertEquals(copy.getRegulatedActivityNumber(), registeredManager.getRegulatedActivityNumber());
		// tests for coverage completeness
		Assert.assertFalse(registeredManager.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(registeredManager.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.registered_manager_condition.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testRegisteredManagerCondition() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		RegisteredManagerCondition registeredManagerCondition = Pptest2DataPoolFactory.getRegisteredManagerCondition();
		dataLayerPptest2.saveOrUpdate(registeredManagerCondition);

		RegisteredManagerConditionPK registeredManagerConditionId = registeredManagerCondition.getId();
		RegisteredManagerCondition copy = registeredManagerCondition.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(registeredManagerCondition); 		 

		registeredManagerCondition = dataLayerPptest2.getRegisteredManagerCondition(registeredManagerConditionId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), registeredManagerCondition.getActionCode());
		Assert.assertEquals(copy.getConditionId(), registeredManagerCondition.getConditionId());
		Assert.assertEquals(copy.getConditionText(), registeredManagerCondition.getConditionText());
		Assert.assertEquals(copy.getId(), registeredManagerCondition.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, registeredManagerCondition.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getRegisteredManagerId(), registeredManagerCondition.getRegisteredManagerId());
		Assert.assertEquals(copy.getRegulatedActivityNumber(), registeredManagerCondition.getRegulatedActivityNumber());
		// tests for coverage completeness
		Assert.assertFalse(registeredManagerCondition.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(registeredManagerCondition.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.report_summary.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testReportSummary() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		ReportSummary reportSummary = Pptest2DataPoolFactory.getReportSummary();
		dataLayerPptest2.saveOrUpdate(reportSummary);

		ReportSummaryPK reportSummaryId = reportSummary.getId();
		ReportSummary copy = reportSummary.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(reportSummary); 		 

		reportSummary = dataLayerPptest2.getReportSummary(reportSummaryId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), reportSummary.getActionCode());
		Assert.assertEquals(copy.getId(), reportSummary.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, reportSummary.getLastUpdated().getTime() / 1000);
		Assert.assertEquals(copy.getText(), reportSummary.getText());
		// tests for coverage completeness
		Assert.assertFalse(reportSummary.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(reportSummary.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.service_type.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testServiceType() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		ServiceType serviceType = Pptest2DataPoolFactory.getServiceType();
		dataLayerPptest2.saveOrUpdate(serviceType);

		ServiceTypePK serviceTypeId = serviceType.getId();
		ServiceType copy = serviceType.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(serviceType); 		 

		serviceType = dataLayerPptest2.getServiceType(serviceTypeId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getHashvalue(), serviceType.getHashvalue());
		Assert.assertEquals(copy.getId(), serviceType.getId());
		// tests for coverage completeness
		Assert.assertFalse(serviceType.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(serviceType.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: pptest2.service_user_band.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testServiceUserBand() throws CloneNotSupportedException {

	 	DataLayerPptest2 dataLayerPptest2 = DataLayerPptest2Impl.getInstance();
		ServiceUserBand serviceUserBand = Pptest2DataPoolFactory.getServiceUserBand();
		dataLayerPptest2.saveOrUpdate(serviceUserBand);

		ServiceUserBandPK serviceUserBandId = serviceUserBand.getId();
		ServiceUserBand copy = serviceUserBand.clone();
		dataLayerPptest2.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerPptest2.evict(serviceUserBand); 		 

		serviceUserBand = dataLayerPptest2.getServiceUserBand(serviceUserBandId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getActionCode(), serviceUserBand.getActionCode());
		Assert.assertEquals(copy.getId(), serviceUserBand.getId());
		Assert.assertEquals(copy.getLastUpdated().getTime() / 1000, serviceUserBand.getLastUpdated().getTime() / 1000);
		// tests for coverage completeness
		Assert.assertFalse(serviceUserBand.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(serviceUserBand.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernatePptest2DaoFactory.getServiceUserBandDao().getQuery("delete from ServiceUserBand").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getServiceTypeDao().getQuery("delete from ServiceType").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getReportSummaryDao().getQuery("delete from ReportSummary").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getRegisteredManagerConditionDao().getQuery("delete from RegisteredManagerCondition").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getRegisteredManagerDao().getQuery("delete from RegisteredManager").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getProviderRegulatedActivityDao().getQuery("delete from ProviderRegulatedActivity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getProviderConditionDao().getQuery("delete from ProviderCondition").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getProviderDao().getQuery("delete from Provider").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getPartnerDao().getQuery("delete from Partner").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getOutcomeDao().getQuery("delete from Outcome").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getNominatedIndividualDao().getQuery("delete from NominatedIndividual").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getLocationRegulatedActivityDao().getQuery("delete from LocationRegulatedActivity").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getLocationConditionDao().getQuery("delete from LocationCondition").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getLocationDao().getQuery("delete from Location").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernatePptest2DaoFactory.getChapterDao().getQuery("delete from Chapter").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernatePptest2DaoFactory.getServiceUserBandDao().getQuery("delete from ServiceUserBand").executeUpdate();
		HibernatePptest2DaoFactory.getServiceTypeDao().getQuery("delete from ServiceType").executeUpdate();
		HibernatePptest2DaoFactory.getReportSummaryDao().getQuery("delete from ReportSummary").executeUpdate();
		HibernatePptest2DaoFactory.getRegisteredManagerConditionDao().getQuery("delete from RegisteredManagerCondition").executeUpdate();
		HibernatePptest2DaoFactory.getRegisteredManagerDao().getQuery("delete from RegisteredManager").executeUpdate();
		HibernatePptest2DaoFactory.getProviderRegulatedActivityDao().getQuery("delete from ProviderRegulatedActivity").executeUpdate();
		HibernatePptest2DaoFactory.getProviderConditionDao().getQuery("delete from ProviderCondition").executeUpdate();
		HibernatePptest2DaoFactory.getProviderDao().getQuery("delete from Provider").executeUpdate();
		HibernatePptest2DaoFactory.getPartnerDao().getQuery("delete from Partner").executeUpdate();
		HibernatePptest2DaoFactory.getOutcomeDao().getQuery("delete from Outcome").executeUpdate();
		HibernatePptest2DaoFactory.getNominatedIndividualDao().getQuery("delete from NominatedIndividual").executeUpdate();
		HibernatePptest2DaoFactory.getLocationRegulatedActivityDao().getQuery("delete from LocationRegulatedActivity").executeUpdate();
		HibernatePptest2DaoFactory.getLocationConditionDao().getQuery("delete from LocationCondition").executeUpdate();
		HibernatePptest2DaoFactory.getLocationDao().getQuery("delete from Location").executeUpdate();
		HibernatePptest2DaoFactory.getChapterDao().getQuery("delete from Chapter").executeUpdate();


		
	}

}

